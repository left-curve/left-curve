# Common labels for all services
x-common-labels: &common-labels
  environment: "development"
  project: "localdango"

services:
  db:
    image: postgres:17
    shm_size: 1gb
    labels:
      <<: *common-labels
    ports:
      # For security reasons, postgres should only accept connections from localhost.
      - 127.0.0.1:${POSTGRES_PORT:-5432}:5432
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./configs/psql/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=grug_dev
    tty: true
    command: ["postgres", "-c", "shared_preload_libraries=pg_stat_statements"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 -U postgres"]
      interval: 2s
      timeout: 5s
      retries: 10

  dango:
    image: ghcr.io/left-curve/left-curve/dango:${DANGO_TAG:-latest}
    labels:
      <<: *common-labels
    depends_on:
      db:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    ports:
      - 127.0.0.1:${DANGO_PORT:-8080}:8080
    volumes:
      - ./configs/dango/config:/root/.dango/config
      - dango_data:/root/.dango/data
      - dango_indexer:/root/.dango/indexer
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_NAME=grug_dev
      - INDEXER__DATABASE__URL=${INDEXER__DATABASE__URL:-postgres://postgres@db:5432/grug_dev}
      - INDEXER__CLICKHOUSE__URL=${INDEXER__CLICKHOUSE__URL:-http://clickhouse:8123}
      - INDEXER__CLICKHOUSE__PASSWORD=${CLICKHOUSE_PASSWORD:-}
    tty: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8080/up"]
      interval: 10s
      timeout: 5s
      retries: 3

  frontend:
    image: ghcr.io/left-curve/left-curve/dango-frontend:${DANGO_TAG:-latest}
    labels:
      <<: *common-labels
    depends_on:
      dango:
        condition: service_healthy
    ports:
      - "127.0.0.1:${DANGO_FRONTEND_PORT:-5081}:80"
    environment:
      - INDEXER_URL=http://localhost:8080/graphql
      - FAUCET_URL=http://localhost:8082/mint
      - QUEST_URL=http://localhost:8081/check_username
      - UP_URL=http://localhost:8080/up
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1/"]
      interval: 10s
      timeout: 5s
      retries: 3

  cometbft:
    image: ghcr.io/left-curve/left-curve/cometbft:${COMETBFT_TAG:-v0.38.17}
    labels:
      <<: *common-labels
    depends_on:
      - dango
    ports:
      - 127.0.0.1:${COMETBFT_PORT:-26657}:26657
    volumes:
      - ./configs/cometbft/config:/root/.cometbft/config
      - cometbft_data:/root/.cometbft/data
    tty: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:26657/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    entrypoint: >
      sh -c "
      mkdir -p /root/.cometbft/data &&
      [ -f /root/.cometbft/data/priv_validator_state.json ] ||
      printf '{\"height\":\"0\",\"round\":0,\"step\":0}' > /root/.cometbft/data/priv_validator_state.json &&
      exec cometbft start
      "

  # Need to create the database
  # quest:
  #   image: ghcr.io/left-curve/bots/quest-2:${QUEST_VERSION:-latest}
  #   profiles: ["quest"]
  #   depends_on:
  #     - db
  #     - cometbft
  #   restart: always
  #   ports:
  #     - 127.0.0.1:${QUEST_PORT:-8081}:8081
  #   environment:
  #     httpd_url: "http://cometbft:26657"
  #     rest_url: "0.0.0.0:8081"
  #     db_url: postgres://myuser:mypassword@db:5432/mydb
  #     initial_loops: 9
  #     max_loops: 3
  #     trading_volume_threshold: 1000000000000
  #     trading_pairs_threshold: 3
  #     eth_txs_threshold: 10
  #     eth_txs_cache_ttl: 30s
  #     eth_rpc_url: "${ETH_RPC_URL}"

  faucet:
    image: ghcr.io/left-curve/bots/faucet:${FAUCET_VERSION:-latest}
    profiles: ["faucet"]
    labels:
      <<: *common-labels
    depends_on:
      dango:
        condition: service_healthy
    environment:
      - HOME=/app
    tty: true
    ports:
      - 127.0.0.1:${FAUCET_PORT:-8082}:8082
    command: ["faucet", "--provider-url", "http://dango:8080", "--chain-id", "{{ chain_id }}"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8082/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    profiles: ["analytics"]
    labels:
      <<: *common-labels
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alerts:/etc/prometheus/alerts
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"

  grafana:
    image: grafana/grafana:latest
    profiles: ["analytics"]
    labels:
      <<: *common-labels
    restart: always
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false

  alertmanager:
    image: prom/alertmanager:latest
    profiles: ["analytics"]
    labels:
      <<: *common-labels
    container_name: alertmanager
    ports:
      - "127.0.0.1:9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"

  push_gateway:
    image: prom/pushgateway:latest
    profiles: ["analytics"]
    labels:
      <<: *common-labels
    restart: always
    ports:
      - "127.0.0.1:9091:9091"

  node-exporter:
    image: prom/node-exporter:latest
    profiles: ["analytics"]
    labels:
      <<: *common-labels
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    ports:
      - "127.0.0.1:9100:9100"

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    restart: unless-stopped
    ports:
      - "127.0.0.1:${CLICKHOUSE_PORT:-8123}:8123" # HTTP interface
      # - "127.0.0.1:9000:9000" # Native TCP interface
      # - "127.0.0.1:9009:9009" # Inter-server communication (for clusters)
      # - "127.0.0.1:9004:9004" # MySQL compatibility interface
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - clickhouse_logs:/var/log/clickhouse-server
      - ./configs/clickhouse/backups:/backups
      - ./configs/clickhouse/config.xml:/etc/clickhouse-server/config.xml:ro
      - ./configs/clickhouse/users.xml:/etc/clickhouse-server/users.xml:ro
    environment:
      CLICKHOUSE_DB: grug_dev
      CLICKHOUSE_USER: default
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-}
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 5s
      timeout: 5s
      retries: 10

  loki:
    image: grafana/loki:latest
    profiles: ["analytics"]
    labels:
      <<: *common-labels
    restart: unless-stopped
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - ./monitoring/loki:/etc/loki
      - loki_data:/loki
    command: -config.file=/etc/loki/loki-config.yml

  promtail:
    image: grafana/promtail:latest
    profiles: ["analytics"]
    labels:
      <<: *common-labels
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./monitoring/promtail:/etc/promtail
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  loki_data:
  db_data:
  dango_data:
  dango_indexer:
  cometbft_data:
  clickhouse_data:
  clickhouse_logs:
