# Ensure these are consistent with the values in `docker-compose.yml`.
DB_HOST := "db"
DB_PORT := "5432"
DB_USER := "postgres"
DB_NAME := "grug_dev"

# List available recipes
default:
  @just --list

# Start the localnet
start:
  #!/usr/bin/env bash
  set -e

  # Set up traps to handle errors, SIGINT, and SIGTERM.
  cleanup() {
    local exit_code=$?
    case "$1" in
      "SIGINT")
        echo "Received SIGINT. Shutting down..."
        ;;
      "SIGTERM")
        echo "Received SIGTERM. Shutting down..."
        ;;
      "")
        if [ $exit_code -ne 0 ]; then
          echo "Command failed with exit code $exit_code. Shutting down..."
        fi
        ;;
    esac

    docker compose down --remove-orphans

    exit $exit_code
  }

  trap 'cleanup SIGINT' INT
  trap 'cleanup SIGTERM' TERM
  trap 'cleanup' ERR

  # 1. Start the postgres service in detached mode.
  docker compose up -d db

  # 2. Wait for the database to be ready.
  until docker compose run --rm db pg_isready -h {{DB_HOST}} -p {{DB_PORT}} -U {{DB_USER}}; do
    echo "Waiting for the database to be ready..."
    sleep 1
  done
  echo "Database is ready!"

  # 3. Check whether the development database already exists. If not, create it.
  exists=$(docker compose run --rm db psql -h {{DB_HOST}} -p {{DB_PORT}} -U {{DB_USER}} -d postgres -t -A -c "SELECT 1 FROM pg_database WHERE datname='{{DB_NAME}}'")
  if [ "$exists" = "1" ]; then
    echo "Database {{DB_NAME}} already exists."
  else
    echo "Database {{DB_NAME}} does not exist. Creating..."
    docker compose run --rm db createdb -h {{DB_HOST}} -p {{DB_PORT}} -U {{DB_USER}} {{DB_NAME}}
    if [ $? -ne 0 ]; then
      echo "Failed to create database {{DB_NAME}}."
      exit 1
    fi
    echo "Database {{DB_NAME}} successfully created."
  fi

  # 4. Check whether cometbft data already exists. If not, create it.
  if [[ ! -f "data/cometbft/data/priv_validator_state.json" ]]; then
    mkdir -p data/cometbft/data
    echo '{"height":"0","round":0,"step":0}' > data/cometbft/data/priv_validator_state.json
  fi

  # 5. Run the cometbft service in detached mode.
  # Since cometbft depends on dango, this also starts the dango service.
  docker compose up -d cometbft

  # 6. Follow the logs of dango.
  docker compose logs -f dango

# Stop the localnet
stop:
  docker compose down --remove-orphans

# Delete the generate data in order to restart a new localnet from scratch
reset:
  rm -rfv ./data

# Run the development database
run-dev-db:
  docker compose up db

# Check whether the deveopment database is running
check-dev-db:
  docker compose run --rm db pg_isready -h {{DB_HOST}} -p {{DB_PORT}} -U {{DB_USER}}

# Create the development database
create-dev-db:
  docker compose run --rm db createdb -h {{DB_HOST}} -p {{DB_PORT}} -U {{DB_USER}} {{DB_NAME}}

# Remove the development database
drop-dev-db:
  docker compose run --rm db dropdb -h {{DB_HOST}} -p {{DB_PORT}} -U {{DB_USER}} {{DB_NAME}}

# Migrate the development database
migrate-dev-db:
  sea-orm-cli migrate up -d sql-migration

# Reset the development database
refresh-dev-db:
  sea-orm-cli migrate refresh

# Generate entity from the datatabase
generate-entity:
  sea-orm-cli generate entity -o sql/src/entity --model-extra-derives 'Default' --ignore-tables 'transfers'
