server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  - job_name: containers
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: status
            values: ["running"]
    relabel_configs:
      # Get container name and remove leading slash
      - source_labels: [__meta_docker_container_name]
        regex: '/(.+)'
        target_label: container_name

      # Use Docker Compose service label directly (most reliable)
      - source_labels: [__meta_docker_container_label_com_docker_compose_service]
        target_label: service_name

      # Use Docker Compose project label
      - source_labels: [__meta_docker_container_label_com_docker_compose_project]
        target_label: project_name

      # Container instance number
      - source_labels: [__meta_docker_container_label_com_docker_compose_container_number]
        target_label: instance_number

      # Custom environment label we added
      - source_labels: [__meta_docker_container_label_environment]
        target_label: environment

      # Custom project label we added
      - source_labels: [__meta_docker_container_label_project]
        target_label: project

      # Set the log path
      - source_labels: [__meta_docker_container_id]
        target_label: __path__
        replacement: /var/lib/docker/containers/${1}/${1}-json.log

      # Add job label
      - target_label: job
        replacement: containerlogs

    pipeline_stages:
      # Parse Docker JSON log entry first
      - json:
          expressions:
            output: log
            stream: stream
            time: time

      # Parse timestamp
      - timestamp:
          format: RFC3339Nano
          source: time

      # Try to parse the log content as JSON (for structured Rust logs)
      - json:
          expressions:
            rust_timestamp: timestamp
            rust_level: level
            rust_target: target
            rust_message: fields.message
            rust_filename: filename
            rust_line_number: line_number
            rust_thread_id: threadId
          source: output

      # Add Rust-specific labels (only if the JSON parsing succeeded)
      - labels:
          rust_level:
          rust_target:

      # Use the structured message if available, otherwise use the raw log
      - template:
          source: rust_message
          template: '{{ if .rust_message }}{{ .rust_message }}{{ else }}{{ .output }}{{ end }}'

      # Output the processed message
      - output:
          source: template
