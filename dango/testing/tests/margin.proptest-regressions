# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc a2ea49789e5e8b89ca0e656f729fecf1cc8b66edaf1b0242fa832b3fa183d62a # shrinks to scenario = LiquidationScenario { test_denoms: [TestDenom { denom: Denom([Part("denom1")]), initial_price: Price { humanized_price: Dec(Int(4888670890000000000000000)), humanized_ema: Dec(Int(4888670890000000000000000)), timestamp: 0, precision: Defined(6) } }, TestDenom { denom: Denom([Part("denom2")]), initial_price: Price { humanized_price: Dec(Int(1472385470000000000000000)), humanized_ema: Dec(Int(1472385470000000000000000)), timestamp: 0, precision: Defined(12) } }], collaterals: [Collateral { denom: TestDenom { denom: Denom([Part("denom2")]), initial_price: Price { humanized_price: Dec(Int(1472385470000000000000000)), humanized_ema: Dec(Int(1472385470000000000000000)), timestamp: 0, precision: Defined(12) } }, amount: Int(13583399), collateral_power: Bounded { value: Dec(Int(300000000000000000)), bounds: PhantomData<grug_types::bound::ZeroExclusiveOneInclusive> } }], debts: [Debt { denom: TestDenom { denom: Denom([Part("denom1")]), initial_price: Price { humanized_price: Dec(Int(4888670890000000000000000)), humanized_ema: Dec(Int(4888670890000000000000000)), timestamp: 0, precision: Defined(6) } }, amount: Int(1) }], changed_denom: TestDenom { denom: Denom([Part("denom1")]), initial_price: Price { humanized_price: Dec(Int(4888670890000000000000000)), humanized_ema: Dec(Int(4888670890000000000000000)), timestamp: 0, precision: Defined(6) } }, new_price: Dec(Int(7768670792197004320000000)), initial_utilization_rate: Dec(Int(940000000000000000)), utilization_rate_after_price_change: Dec(Int(1420000000000000000)) }
cc b5fb8a1ebab93f910451012cae0fe75b8563878a962878184cb4645434f11d80 # shrinks to scenario = LiquidationScenario { test_denoms: [TestDenom { denom: Denom([Part("denom1")]), initial_price: Price { humanized_price: Dec(Int(9501642890000000000000000)), humanized_ema: Dec(Int(9501642890000000000000000)), timestamp: 0, precision: Defined(7) } }, TestDenom { denom: Denom([Part("denom2")]), initial_price: Price { humanized_price: Dec(Int(5848042050000000000000000)), humanized_ema: Dec(Int(5848042050000000000000000)), timestamp: 0, precision: Defined(13) } }, TestDenom { denom: Denom([Part("denom3")]), initial_price: Price { humanized_price: Dec(Int(6213979550000000000000000)), humanized_ema: Dec(Int(6213979550000000000000000)), timestamp: 0, precision: Defined(15) } }], collaterals: [Collateral { denom: TestDenom { denom: Denom([Part("denom2")]), initial_price: Price { humanized_price: Dec(Int(5848042050000000000000000)), humanized_ema: Dec(Int(5848042050000000000000000)), timestamp: 0, precision: Defined(13) } }, amount: Int(34199480), collateral_power: Bounded { value: Dec(Int(300000000000000000)), bounds: PhantomData<grug_types::bound::ZeroExclusiveOneInclusive> } }], debts: [Debt { denom: TestDenom { denom: Denom([Part("denom2")]), initial_price: Price { humanized_price: Dec(Int(5848042050000000000000000)), humanized_ema: Dec(Int(5848042050000000000000000)), timestamp: 0, precision: Defined(13) } }, amount: Int(5269048) }, Debt { denom: TestDenom { denom: Denom([Part("denom3")]), initial_price: Price { humanized_price: Dec(Int(6213979550000000000000000)), humanized_ema: Dec(Int(6213979550000000000000000)), timestamp: 0, precision: Defined(15) } }, amount: Int(495875747) }], changed_denom: TestDenom { denom: Denom([Part("denom3")]), initial_price: Price { humanized_price: Dec(Int(6213979550000000000000000)), humanized_ema: Dec(Int(6213979550000000000000000)), timestamp: 0, precision: Defined(15) } }, new_price: Dec(Int(8168939206000000000000000)) }
cc d05b231f319de62cae23a9920f65c82cf0a2a5bd2d53376c3f66d04afd125273 # shrinks to scenario = LiquidationScenario { test_denoms: [TestDenom { denom: Denom([Part("denom1")]), initial_price: Price { humanized_price: Dec(Int(9204876650000000000000000)), humanized_ema: Dec(Int(9204876650000000000000000)), timestamp: 0, precision: Defined(15) } }, TestDenom { denom: Denom([Part("denom2")]), initial_price: Price { humanized_price: Dec(Int(8715217590000000000000000)), humanized_ema: Dec(Int(8715217590000000000000000)), timestamp: 0, precision: Defined(6) } }, TestDenom { denom: Denom([Part("denom3")]), initial_price: Price { humanized_price: Dec(Int(5428507380000000000000000)), humanized_ema: Dec(Int(5428507380000000000000000)), timestamp: 0, precision: Defined(6) } }], collaterals: [Collateral { denom: TestDenom { denom: Denom([Part("denom3")]), initial_price: Price { humanized_price: Dec(Int(5428507380000000000000000)), humanized_ema: Dec(Int(5428507380000000000000000)), timestamp: 0, precision: Defined(6) } }, amount: Int(3), collateral_power: Bounded { value: Dec(Int(300000000000000000)), bounds: PhantomData<grug_types::bound::ZeroExclusiveOneInclusive> } }], debts: [Debt { denom: TestDenom { denom: Denom([Part("denom1")]), initial_price: Price { humanized_price: Dec(Int(9204876650000000000000000)), humanized_ema: Dec(Int(9204876650000000000000000)), timestamp: 0, precision: Defined(15) } }, amount: Int(509537558) }], changed_denom: TestDenom { denom: Denom([Part("denom1")]), initial_price: Price { humanized_price: Dec(Int(9204876650000000000000000)), humanized_ema: Dec(Int(9204876650000000000000000)), timestamp: 0, precision: Defined(15) } }, new_price: Dec(Int(11697864079000000000000000)) }
