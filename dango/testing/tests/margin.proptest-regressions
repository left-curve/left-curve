# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc ac5a5d6366b3b0beb7ed0241d58fcbc790a2492c0d1ec32cf6009977c05cc35d # shrinks to scenario = LiquidationScenario { test_denoms: [TestDenom { denom: Denom([Part("denom1")]), initial_price: Price { humanized_price: Dec(Int(397899600000000000000000)), humanized_ema: Dec(Int(397899600000000000000000)), timestamp: 0, precision: Defined(10) } }, TestDenom { denom: Denom([Part("denom2")]), initial_price: Price { humanized_price: Dec(Int(2986061190000000000000000)), humanized_ema: Dec(Int(2986061190000000000000000)), timestamp: 0, precision: Defined(9) } }, TestDenom { denom: Denom([Part("denom3")]), initial_price: Price { humanized_price: Dec(Int(5561687720000000000000000)), humanized_ema: Dec(Int(5561687720000000000000000)), timestamp: 0, precision: Defined(16) } }], collaterals: [Collateral { denom: TestDenom { denom: Denom([Part("denom2")]), initial_price: Price { humanized_price: Dec(Int(2986061190000000000000000)), humanized_ema: Dec(Int(2986061190000000000000000)), timestamp: 0, precision: Defined(9) } }, amount: Int(2354941), collateral_power: Bounded { value: Dec(Int(470000000000000000)), bounds: PhantomData<grug_types::bound::ZeroExclusiveOneInclusive> } }], debts: [Debt { denom: TestDenom { denom: Denom([Part("denom1")]), initial_price: Price { humanized_price: Dec(Int(397899600000000000000000)), humanized_ema: Dec(Int(397899600000000000000000)), timestamp: 0, precision: Defined(10) } }, amount: Int(40936122) }, Debt { denom: TestDenom { denom: Denom([Part("denom2")]), initial_price: Price { humanized_price: Dec(Int(2986061190000000000000000)), humanized_ema: Dec(Int(2986061190000000000000000)), timestamp: 0, precision: Defined(9) } }, amount: Int(566837) }], changed_denom: TestDenom { denom: Denom([Part("denom1")]), initial_price: Price { humanized_price: Dec(Int(397899600000000000000000)), humanized_ema: Dec(Int(397899600000000000000000)), timestamp: 0, precision: Defined(10) } }, new_price: Dec(Int(608256071470920000000000)) }
cc 0229c6961503df5b48f63d96b03dac330e3be42866db27ed2aa8ffb073298e48 # shrinks to scenario = LiquidationScenario { test_denoms: [TestDenom { denom: Denom([Part("denom1")]), initial_price: Price { humanized_price: Dec(Int(1885962810000000000000000)), humanized_ema: Dec(Int(1885962810000000000000000)), timestamp: 0, precision: Defined(11) } }, TestDenom { denom: Denom([Part("denom2")]), initial_price: Price { humanized_price: Dec(Int(9188268370000000000000000)), humanized_ema: Dec(Int(9188268370000000000000000)), timestamp: 0, precision: Defined(8) } }, TestDenom { denom: Denom([Part("denom3")]), initial_price: Price { humanized_price: Dec(Int(6009190820000000000000000)), humanized_ema: Dec(Int(6009190820000000000000000)), timestamp: 0, precision: Defined(16) } }], collaterals: [Collateral { denom: TestDenom { denom: Denom([Part("denom2")]), initial_price: Price { humanized_price: Dec(Int(9188268370000000000000000)), humanized_ema: Dec(Int(9188268370000000000000000)), timestamp: 0, precision: Defined(8) } }, amount: Int(217), collateral_power: Bounded { value: Dec(Int(400000000000000000)), bounds: PhantomData<grug_types::bound::ZeroExclusiveOneInclusive> } }], debts: [Debt { denom: TestDenom { denom: Denom([Part("denom1")]), initial_price: Price { humanized_price: Dec(Int(1885962810000000000000000)), humanized_ema: Dec(Int(1885962810000000000000000)), timestamp: 0, precision: Defined(11) } }, amount: Int(144724) }, Debt { denom: TestDenom { denom: Denom([Part("denom2")]), initial_price: Price { humanized_price: Dec(Int(9188268370000000000000000)), humanized_ema: Dec(Int(9188268370000000000000000)), timestamp: 0, precision: Defined(8) } }, amount: Int(65) }], changed_denom: TestDenom { denom: Denom([Part("denom1")]), initial_price: Price { humanized_price: Dec(Int(1885962810000000000000000)), humanized_ema: Dec(Int(1885962810000000000000000)), timestamp: 0, precision: Defined(11) } }, new_price: Dec(Int(5608440937744500000000000)) }
cc 4650e521ca1df1009e27f8173532ec811011c10a096bb60b756451dd8e12c824 # shrinks to scenario = LiquidationScenario { test_denoms: [TestDenom { denom: Denom([Part("denom1")]), initial_price: Price { humanized_price: Dec(Int(1631755350000000000000000)), humanized_ema: Dec(Int(1631755350000000000000000)), timestamp: 0, precision: Defined(12) } }, TestDenom { denom: Denom([Part("denom2")]), initial_price: Price { humanized_price: Dec(Int(5350000000000000000)), humanized_ema: Dec(Int(5350000000000000000)), timestamp: 0, precision: Defined(15) } }], collaterals: [Collateral { denom: TestDenom { denom: Denom([Part("denom1")]), initial_price: Price { humanized_price: Dec(Int(1631755350000000000000000)), humanized_ema: Dec(Int(1631755350000000000000000)), timestamp: 0, precision: Defined(12) } }, amount: Int(2391645904516), collateral_power: Bounded { value: Dec(Int(720000000000000000)), bounds: PhantomData<grug_types::bound::ZeroExclusiveOneInclusive> } }], debts: [Debt { denom: TestDenom { denom: Denom([Part("denom2")]), initial_price: Price { humanized_price: Dec(Int(5350000000000000000)), humanized_ema: Dec(Int(5350000000000000000)), timestamp: 0, precision: Defined(15) } }, amount: Int(493694732859758960428) }], changed_denom: TestDenom { denom: Denom([Part("denom2")]), initial_price: Price { humanized_price: Dec(Int(5350000000000000000)), humanized_ema: Dec(Int(5350000000000000000)), timestamp: 0, precision: Defined(15) } }, new_price: Dec(Int(6374000000000000000)) }
cc 0811e94aeae87533d17a1be5fbed5afe78a2a143e89cd0a7c871dba43dae1bef
