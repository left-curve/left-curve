use std::str::FromStr;

use bnum::types::I256;
use grug::{Dec256,  Inner, Int256, IsZero, MultiplyFraction, NextNumber, Number, NumberConst, PrevNumber, Sign, Uint128, Uint256};

pub const NATURAL_LOG_OF_TWO: Dec256 = Dec256::new(693147180559945309);
pub const LOG2_OF_TEN: Dec256 = Dec256::new(3321928094887362348);
pub const ZERO_POINT_FIVE: Dec256 = Dec256::new_percent(50);
pub const TABLE_SIZE: u128 = 1024;
pub const LOG2_LUT_ONE_TO_TWO: [&str; TABLE_SIZE as usize] = [
    "0.000000000000000000",
    "0.001408194392808389",
    "0.002815015607054038",
    "0.004220466318195085",
    "0.005624549193878107",
    "0.007027266893968504",
    "0.008428622070580729",
    "0.009828617368108376",
    "0.011227255423254120",
    "0.012624538865059512",
    "0.014020470314934628",
    "0.015415052386687583",
    "0.016808287686553889",
    "0.018200178813225685",
    "0.019590728357880814",
    "0.020979938904211773",
    "0.022367813028454508",
    "0.023754353299417089",
    "0.025139562278508229",
    "0.026523442519765679",
    "0.027905996569884484",
    "0.029287226968245098",
    "0.030667136246941374",
    "0.032045726930808412",
    "0.033423001537450279",
    "0.034798962577267594",
    "0.036173612553484985",
    "0.037546953962178409",
    "0.038918989292302351",
    "0.040289721025716886",
    "0.041659151637214617",
    "0.043027283594547482",
    "0.044394119358453438",
    "0.045759661382683014",
    "0.047123912114025745",
    "0.048486873992336472",
    "0.049848549450561527",
    "0.051208940914764790",
    "0.052568050804153622",
    "0.053925881531104678",
    "0.055282435501189601",
    "0.056637715113200591",
    "0.057991722759175854",
    "0.059344460824424936",
    "0.060695931687553936",
    "0.062046137720490600",
    "0.063395081288509296",
    "0.064742764750255879",
    "0.066089190457772433",
    "0.067434360756521903",
    "0.068778277985412606",
    "0.070120944476822635",
    "0.071462362556624145",
    "0.072802534544207527",
    "0.074141462752505471",
    "0.075479149488016917",
    "0.076815597050830892",
    "0.078150807734650244",
    "0.079484783826815259",
    "0.080817527608327169",
    "0.082149041353871561",
    "0.083479327331841664",
    "0.084808387804361542",
    "0.086136225027309169",
    "0.087462841250339408",
    "0.088788238716906875",
    "0.090112419664288706",
    "0.091435386323607215",
    "0.092757140919852449",
    "0.094077685671904642",
    "0.095397022792556561",
    "0.096715154488535759",
    "0.098032082960526716",
    "0.099347810403192885",
    "0.100662339005198639",
    "0.101975670949231114",
    "0.103287808412021952",
    "0.104598753564368952",
    "0.105908508571157615",
    "0.107217075591382595",
    "0.108524456778169054",
    "0.109830654278793917",
    "0.111135670234707032",
    "0.112439506781552238",
    "0.113742166049188330",
    "0.115043650161709939",
    "0.116343961237468311",
    "0.117643101389091993",
    "0.118941072723507431",
    "0.120237877341959468",
    "0.121533517340031758",
    "0.122827994807667081",
    "0.124121311829187572",
    "0.125413470483314857",
    "0.126704472843190099",
    "0.127994320976393958",
    "0.129283016944966455",
    "0.130570562805426753",
    "0.131856960608792846",
    "0.133142212400601167",
    "0.134426320220926099",
    "0.135709286104399407",
    "0.136991112080229579",
    "0.138271800172221087",
    "0.139551352398793554",
    "0.140829770773000842",
    "0.142107057302550056",
    "0.143383213989820463",
    "0.144658242831882321",
    "0.145932145820515637",
    "0.147204924942228833",
    "0.148476582178277332",
    "0.149747119504682061",
    "0.151016538892247881",
    "0.152284842306581920",
    "0.153552031708111841",
    "0.154818109052104023",
    "0.156083076288681660",
    "0.157346935362842786",
    "0.158609688214478216",
    "0.159871336778389417",
    "0.161131882984306287",
    "0.162391328756904871",
    "0.163649676015824991",
    "0.164906926675687801",
    "0.166163082646113266",
    "0.167418145831737568",
    "0.168672118132230428",
    "0.169925001442312363",
    "0.171176797651771860",
    "0.172427508645482482",
    "0.173677136303419893",
    "0.174925682500678817",
    "0.176173149107489915",
    "0.177419537989236601",
    "0.178664851006471770",
    "0.179909090014934469",
    "0.181152256865566483",
    "0.182394353404528864",
    "0.183635381473218372",
    "0.184875342908283861",
    "0.186114239541642585",
    "0.187352073200496435",
    "0.188588845707348114",
    "0.189824558880017230",
    "0.191059214531656332",
    "0.192292814470766871",
    "0.193525360501215095",
    "0.194756854422247875",
    "0.195987298028508462",
    "0.197216693110052184",
    "0.198445041452362068",
    "0.199672344836364396",
    "0.200898605038444204",
    "0.202123823830460703",
    "0.203348002979762642",
    "0.204571144249203607",
    "0.205793249397157248",
    "0.207014320177532448",
    "0.208234358339788428",
    "0.209453365628949782",
    "0.210671343785621454",
    "0.211888294546003651",
    "0.213104219641906694",
    "0.214319120800765801",
    "0.215532999745655814",
    "0.216745858195305864",
    "0.217957697864113967",
    "0.219168520462161572",
    "0.220378327695228029",
    "0.221587121264805020",
    "0.222794902868110906",
    "0.224001674198105033",
    "0.225207436943501964",
    "0.226412192788785664",
    "0.227615943414223615",
    "0.228818690495880877",
    "0.230020435705634095",
    "0.231221180711185435",
    "0.232420927176076479",
    "0.233619676759702046",
    "0.234817431117323967",
    "0.236014191900084796",
    "0.237209960755021470",
    "0.238404739325078907",
    "0.239598529249123551",
    "0.240791332161956860",
    "0.241983149694328740",
    "0.243173983472950919",
    "0.244363835120510269",
    "0.245552706255682078",
    "0.246740598493143255",
    "0.247927513443585494",
    "0.249113452713728373",
    "0.250298417906332410",
    "0.251482410620212052",
    "0.252665432450248624",
    "0.253847484987403220",
    "0.255028569818729533",
    "0.256208688527386648",
    "0.257387842692651771",
    "0.258566033889932911",
    "0.259743263690781505",
    "0.260919533662905004",
    "0.262094845370179388",
    "0.263269200372661652",
    "0.264442600226602222",
    "0.265615046484457337",
    "0.266786540694901364",
    "0.267957084402839079",
    "0.269126679149417888",
    "0.270295326472040002",
    "0.271463027904374563",
    "0.272629784976369717",
    "0.273795599214264647",
    "0.274960472140601548",
    "0.276124405274237557",
    "0.277287400130356638",
    "0.278449458220481417",
    "0.279610581052484965",
    "0.280770770130602541",
    "0.281930026955443286",
    "0.283088353024001862",
    "0.284245749829670060",
    "0.285402218862248342",
    "0.286557761607957356",
    "0.287712379549449391",
    "0.288866074165819794",
    "0.290018846932618334",
    "0.291170699321860532",
    "0.292321632802038931",
    "0.293471648838134339",
    "0.294620748891627006",
    "0.295768934420507778",
    "0.296916206879289190",
    "0.298062567719016523",
    "0.299208018387278818",
    "0.300352560328219840",
    "0.301496194982549005",
    "0.302638923787552261",
    "0.303780748177102924",
    "0.304921669581672476",
    "0.306061689428341316",
    "0.307200809140809468",
    "0.308339030139407254",
    "0.309476353841105917",
    "0.310612781659528201",
    "0.311748315004958902",
    "0.312882955284355361",
    "0.314016703901357927",
    "0.315149562256300375",
    "0.316281531746220285",
    "0.317412613764869377",
    "0.318542809702723807",
    "0.319672120946994424",
    "0.320800548881636990",
    "0.321928094887362348",
    "0.323054760341646565",
    "0.324180546618741028",
    "0.325305455089682497",
    "0.326429487122303129",
    "0.327552644081240455",
    "0.328674927327947318",
    "0.329796338220701780",
    "0.330916878114616980",
    "0.332036548361650964",
    "0.333155350310616468",
    "0.334273285307190671",
    "0.335390354693924902",
    "0.336506559810254317",
    "0.337621901992507536",
    "0.338736382573916237",
    "0.339850002884624726",
    "0.340962764251699455",
    "0.342074667999138515",
    "0.343185715447881087",
    "0.344295907915816856",
    "0.345405246717795393",
    "0.346513733165635498",
    "0.347621368568134503",
    "0.348728154231077553",
    "0.349834091457246831",
    "0.350939181546430771",
    "0.352043425795433213",
    "0.353146825498082540",
    "0.354249381945240772",
    "0.355351096424812627",
    "0.356451970221754548",
    "0.357552004618083693",
    "0.358651200892886898",
    "0.359749560322329593",
    "0.360847084179664699",
    "0.361943773735241480",
    "0.363039630256514366",
    "0.364134655008051742",
    "0.365228849251544706",
    "0.366322214245815786",
    "0.367414751246827633",
    "0.368506461507691680",
    "0.369597346278676759",
    "0.370687406807217698",
    "0.371776644337923875",
    "0.372865060112587750",
    "0.373952655370193355",
    "0.375039431346924756",
    "0.376125389276174488",
    "0.377210530388551949",
    "0.378294855911891769",
    "0.379378367071262145",
    "0.380461065088973148",
    "0.381542951184584993",
    "0.382624026574916284",
    "0.383704292474052224",
    "0.384783750093352797",
    "0.385862400641460914",
    "0.386940245324310541",
    "0.388017285345134781",
    "0.389093521904473935",
    "0.390168956200183533",
    "0.391243589427442333",
    "0.392317422778760289",
    "0.393390457443986492",
    "0.394462694610317082",
    "0.395534135462303124",
    "0.396604781181858465",
    "0.397674632948267555",
    "0.398743691938193240",
    "0.399811959325684527",
    "0.400879436282184321",
    "0.401946123976537131",
    "0.403012023574996751",
    "0.404077136241233909",
    "0.405141463136343890",
    "0.406205005418854131",
    "0.407267764244731787",
    "0.408329740767391269",
    "0.409390936137701756",
    "0.410451351503994676",
    "0.411510988012071165",
    "0.412569846805209493",
    "0.413627929024172465",
    "0.414685235807214797",
    "0.415741768290090462",
    "0.416797527606060008",
    "0.417852514885897857",
    "0.418906731257899564",
    "0.419960177847889064",
    "0.421012855779225882",
    "0.422064766172812322",
    "0.423115910147100629",
    "0.424166288818100120",
    "0.425215903299384300",
    "0.426264754702097939",
    "0.427312844134964134",
    "0.428360172704291340",
    "0.429406741513980374",
    "0.430452551665531402",
    "0.431497604258050887",
    "0.432541900388258528",
    "0.433585441150494159",
    "0.434628227636724633",
    "0.435670260936550678",
    "0.436711542137213727",
    "0.437752072323602724",
    "0.438791852578260908",
    "0.439830883981392568",
    "0.440869167610869779",
    "0.441906704542239108",
    "0.442943495848728302",
    "0.443979542601252946",
    "0.445014845868423101",
    "0.446049406716549920",
    "0.447083226209652231",
    "0.448116305409463109",
    "0.449148645375436418",
    "0.450180247164753326",
    "0.451211111832328803",
    "0.452241240430818095",
    "0.453270634010623170",
    "0.454299293619899149",
    "0.455327220304560705",
    "0.456354415108288447",
    "0.457380879072535276",
    "0.458406613236532722",
    "0.459431618637297256",
    "0.460455896309636582",
    "0.461479447286155901",
    "0.462502272597264165",
    "0.463524373271180290",
    "0.464545750333939369",
    "0.465566404809398845",
    "0.466586337719244669",
    "0.467605550082997440",
    "0.468624042918018519",
    "0.469641817239516118",
    "0.470658874060551377",
    "0.471675214392044409",
    "0.472690839242780336",
    "0.473705749619415287",
    "0.474719946526482395",
    "0.475733430966397755",
    "0.476746203939466371",
    "0.477758266443888081",
    "0.478769619475763459",
    "0.479780264029099697",
    "0.480790201095816468",
    "0.481799431665751764",
    "0.482807956726667724",
    "0.483815777264256424",
    "0.484822894262145668",
    "0.485829308701904740",
    "0.486835021563050148",
    "0.487840033823051345",
    "0.488844346457336425",
    "0.489847960439297807",
    "0.490850876740297893",
    "0.491853096329674711",
    "0.492854620174747535",
    "0.493855449240822489",
    "0.494855584491198124",
    "0.495855026887170988",
    "0.496853777388041164",
    "0.497851836951117800",
    "0.498849206531724610",
    "0.499845887083205361",
    "0.500841879556929343",
    "0.501837184902296816",
    "0.502831804066744443",
    "0.503825737995750694",
    "0.504818987632841246",
    "0.505811553919594355",
    "0.506803437795646209",
    "0.507794640198696268",
    "0.508785162064512581",
    "0.509775004326937089",
    "0.510764167917890904",
    "0.511752653767379578",
    "0.512740462803498343",
    "0.513727595952437347",
    "0.514714054138486857",
    "0.515699838284042458",
    "0.516684949309610222",
    "0.517669388133811872",
    "0.518653155673389915",
    "0.519636252843212770",
    "0.520618680556279869",
    "0.521600439723726744",
    "0.522581531254830102",
    "0.523561956057012872",
    "0.524541715035849245",
    "0.525520809095069689",
    "0.526499239136565955",
    "0.527477006060396056",
    "0.528454110764789242",
    "0.529430554146150943",
    "0.530406337099067710",
    "0.531381460516312130",
    "0.532355925288847724",
    "0.533329732305833836",
    "0.534302882454630499",
    "0.535275376620803287",
    "0.536247215688128148",
    "0.537218400538596228",
    "0.538188932052418667",
    "0.539158811108031390",
    "0.540128038582099878",
    "0.541096615349523919",
    "0.542064542283442350",
    "0.543031820255237777",
    "0.543998450134541283",
    "0.544964432789237119",
    "0.545929769085467381",
    "0.546894459887636664",
    "0.547858506058416716",
    "0.548821908458751055",
    "0.549784667947859593",
    "0.550746785383243225",
    "0.551708261620688418",
    "0.552669097514271775",
    "0.553629293916364587",
    "0.554588851677637372",
    "0.555547771647064394",
    "0.556506054671928172",
    "0.557463701597823972",
    "0.558420713268664281",
    "0.559377090526683273",
    "0.560332834212441254",
    "0.561287945164829096",
    "0.562242424221072652",
    "0.563196272216737163",
    "0.564149489985731646",
    "0.565102078360313266",
    "0.566054038171091699",
    "0.567005370247033475",
    "0.567956075415466310",
    "0.568906154502083424",
    "0.569855608330947842",
    "0.570804437724496684",
    "0.571752643503545439",
    "0.572700226487292224",
    "0.573647187493322035",
    "0.574593527337610972",
    "0.575539246834530466",
    "0.576484346796851477",
    "0.577428828035748689",
    "0.578372691360804687",
    "0.579315937580014119",
    "0.580258567499787847",
    "0.581200581924957085",
    "0.582141981658777519",
    "0.583082767502933419",
    "0.584022940257541736",
    "0.584962500721156181",
    "0.585901449690771300",
    "0.586839787961826525",
    "0.587777516328210220",
    "0.588714635582263712",
    "0.589651146514785305",
    "0.590587049915034288",
    "0.591522346570734922",
    "0.592457037268080420",
    "0.593391122791736910",
    "0.594324603924847393",
    "0.595257481449035676",
    "0.596189756144410302",
    "0.597121428789568463",
    "0.598052500161599905",
    "0.598982971036090810",
    "0.599912842187127680",
    "0.600842114387301196",
    "0.601770788407710071",
    "0.602698865017964889",
    "0.603626344986191933",
    "0.604553229079036996",
    "0.605479518061669187",
    "0.606405212697784720",
    "0.607330313749610690",
    "0.608254821977908840",
    "0.609178738141979318",
    "0.610102062999664410",
    "0.611024797307352281",
    "0.611946941819980682",
    "0.612868497291040665",
    "0.613789464472580271",
    "0.614709844115208215",
    "0.615629636968097555",
    "0.616548843778989354",
    "0.617467465294196323",
    "0.618385502258606460",
    "0.619302955415686673",
    "0.620219825507486390",
    "0.621136113274641166",
    "0.622051819456376267",
    "0.622966944790510250",
    "0.623881490013458532",
    "0.624795455860236944",
    "0.625708843064465272",
    "0.626621652358370799",
    "0.627533884472791816",
    "0.628445540137181142",
    "0.629356620079609619",
    "0.630267125026769602",
    "0.631177055703978437",
    "0.632086412835181926",
    "0.632995197142957786",
    "0.633903409348519091",
    "0.634811050171717709",
    "0.635718120331047721",
    "0.636624620543648839",
    "0.637530551525309803",
    "0.638435913990471777",
    "0.639340708652231725",
    "0.640244936222345783",
    "0.641148597411232619",
    "0.642051692927976780",
    "0.642954223480332035",
    "0.643856189774724696",
    "0.644757592516256940",
    "0.645658432408710118",
    "0.646558710154548046",
    "0.647458426454920298",
    "0.648357582009665477",
    "0.649256177517314486",
    "0.650154213675093780",
    "0.651051691178928614",
    "0.651948610723446280",
    "0.652844973001979328",
    "0.653740778706568787",
    "0.654636028527967369",
    "0.655530723155642664",
    "0.656424863277780326",
    "0.657318449581287250",
    "0.658211482751794737",
    "0.659103963473661653",
    "0.659995892429977571",
    "0.660887270302565912",
    "0.661778097771987074",
    "0.662668375517541541",
    "0.663558104217273002",
    "0.664447284547971440",
    "0.665335917185176228",
    "0.666224002803179204",
    "0.667111542075027742",
    "0.667998535672527814",
    "0.668884984266247038",
    "0.669770888525517723",
    "0.670656249118439900",
    "0.671541066711884344",
    "0.672425341971495590",
    "0.673309075561694934",
    "0.674192268145683433",
    "0.675074920385444888",
    "0.675957032941748822",
    "0.676838606474153449",
    "0.677719641641008631",
    "0.678600139099458828",
    "0.679480099505446041",
    "0.680359523513712743",
    "0.681238411777804800",
    "0.682116764950074388",
    "0.682994583681682897",
    "0.683871868622603827",
    "0.684748620421625677",
    "0.685624839726354821",
    "0.686500527183218381",
    "0.687375683437467088",
    "0.688250309133178133",
    "0.689124404913258014",
    "0.689997971419445366",
    "0.690871009292313796",
    "0.691743519171274694",
    "0.692615501694580045",
    "0.693486957499325235",
    "0.694357887221451836",
    "0.695228291495750396",
    "0.696098170955863213",
    "0.696967526234287104",
    "0.697836357962376163",
    "0.698704666770344511",
    "0.699572453287269044",
    "0.700439718141092160",
    "0.701306461958624493",
    "0.702172685365547623",
    "0.703038388986416795",
    "0.703903573444663612",
    "0.704768239362598737",
    "0.705632387361414572",
    "0.706496018061187939",
    "0.707359132080882750",
    "0.708221730038352666",
    "0.709083812550343753",
    "0.709945380232497129",
    "0.710806433699351597",
    "0.711666973564346281",
    "0.712527000439823243",
    "0.713386514937030102",
    "0.714245517666122637",
    "0.715104009236167386",
    "0.715961990255144241",
    "0.716819461329949027",
    "0.717676423066396080",
    "0.718532876069220813",
    "0.719388820942082280",
    "0.720244258287565726",
    "0.721099188707185134",
    "0.721953612801385761",
    "0.722807531169546669",
    "0.723660944409983249",
    "0.724513853119949735",
    "0.725366257895641713",
    "0.726218159332198620",
    "0.727069558023706238",
    "0.727920454563199179",
    "0.728770849542663367",
    "0.729620743553038502",
    "0.730470137184220532",
    "0.731319031025064104",
    "0.732167425663385015",
    "0.733015321685962654",
    "0.733862719678542439",
    "0.734709620225838243",
    "0.735556023911534813",
    "0.736401931318290188",
    "0.737247343027738101",
    "0.738092259620490384",
    "0.738936681676139354",
    "0.739780609773260205",
    "0.740624044489413380",
    "0.741466986401146948",
    "0.742309436083998967",
    "0.743151394112499841",
    "0.743992861060174670",
    "0.744833837499545598",
    "0.745674324002134145",
    "0.746514321138463543",
    "0.747353829478061052",
    "0.748192849589460287",
    "0.749031382040203518",
    "0.749869427396843982",
    "0.750706986224948173",
    "0.751544059089098136",
    "0.752380646552893749",
    "0.753216749178955002",
    "0.754052367528924263",
    "0.754887502163468544",
    "0.755722153642281762",
    "0.756556322524086981",
    "0.757390009366638663",
    "0.758223214726724905",
    "0.759055939160169667",
    "0.759888183221834998",
    "0.760719947465623255",
    "0.761551232444479316",
    "0.762382038710392783",
    "0.763212366814400181",
    "0.764042217306587154",
    "0.764871590736090650",
    "0.765700487651101100",
    "0.766528908598864593",
    "0.767356854125685045",
    "0.768184324776926358",
    "0.769011321097014578",
    "0.769837843629440043",
    "0.770663892916759524",
    "0.771489469500598366",
    "0.772314573921652617",
    "0.773139206719691151",
    "0.773963368433557789",
    "0.774787059601173411",
    "0.775610280759538062",
    "0.776433032444733052",
    "0.777255315191923053",
    "0.778077129535358184",
    "0.778898476008376098",
    "0.779719355143404056",
    "0.780539767471960997",
    "0.781359713524659604",
    "0.782179193831208366",
    "0.782998208920413626",
    "0.783816759320181632",
    "0.784634845557520578",
    "0.785452468158542638",
    "0.786269627648465999",
    "0.787086324551616884",
    "0.787902559391431569",
    "0.788718332690458397",
    "0.789533644970359788",
    "0.790348496751914236",
    "0.791162888555018307",
    "0.791976820898688630",
    "0.792790294301063879",
    "0.793603309279406757",
    "0.794415866350105963",
    "0.795227966028678165",
    "0.796039608829769961",
    "0.796850795267159833",
    "0.797661525853760103",
    "0.798471801101618876",
    "0.799281621521921982",
    "0.800090987624994909",
    "0.800899899920304733",
    "0.801708358916462045",
    "0.802516365121222866",
    "0.803323919041490562",
    "0.804131021183317753",
    "0.804937672051908214",
    "0.805743872151618772",
    "0.806549621985961201",
    "0.807354922057604107",
    "0.808159772868374809",
    "0.808964174919261214",
    "0.809768128710413693",
    "0.810571634741146942",
    "0.811374693509941846",
    "0.812177305514447330",
    "0.812979471251482214",
    "0.813781191217037059",
    "0.814582465906275999",
    "0.815383295813538588",
    "0.816183681432341617",
    "0.816983623255380949",
    "0.817783121774533335",
    "0.818582177480858228",
    "0.819380790864599591",
    "0.820178962415187708",
    "0.820976692621240977",
    "0.821773981970567708",
    "0.822570830950167913",
    "0.823367240046235088",
    "0.824163209744157997",
    "0.824958740528522443",
    "0.825753832883113042",
    "0.826548487290914984",
    "0.827342704234115797",
    "0.828136484194107100",
    "0.828929827651486356",
    "0.829722735086058616",
    "0.830515206976838259",
    "0.831307243802050734",
    "0.832098846039134283",
    "0.832890014164741675",
    "0.833680748654741926",
    "0.834471049984222013",
    "0.835260918627488591",
    "0.836050355058069700",
    "0.836839359748716468",
    "0.837627933171404806",
    "0.838416075797337108",
    "0.839203788096943939",
    "0.839991070539885714",
    "0.840777923595054386",
    "0.841564347730575118",
    "0.842350343413807953",
    "0.843135911111349481",
    "0.843921051289034503",
    "0.844705764411937687",
    "0.845490050944375220",
    "0.846273911349906458",
    "0.847057346091335570",
    "0.847840355630713174",
    "0.848622940429337977",
    "0.849405100947758404",
    "0.850186837645774222",
    "0.850968150982438164",
    "0.851749041416057545",
    "0.852529509404195878",
    "0.853309555403674478",
    "0.854089179870574069",
    "0.854868383260236386",
    "0.855647166027265767",
    "0.856425528625530744",
    "0.857203471508165635",
    "0.857980995127572121",
    "0.858758099935420829",
    "0.859534786382652903",
    "0.860311054919481577",
    "0.861086905995393738",
    "0.861862340059151490",
    "0.862637357558793709",
    "0.863411958941637598",
    "0.864186144654280237",
    "0.864959915142600125",
    "0.865733270851758723",
    "0.866506212226201989",
    "0.867278739709661913",
    "0.868050853745158044",
    "0.868822554774999012",
    "0.869593843240784054",
    "0.870364719583404523",
    "0.871135184243045408",
    "0.871905237659186834",
    "0.872674880270605573",
    "0.873444112515376540",
    "0.874212934830874292",
    "0.874981347653774516",
    "0.875749351420055520",
    "0.876516946564999720",
    "0.877284133523195113",
    "0.878050912728536759",
    "0.878817284614228252",
    "0.879583249612783188",
    "0.880348808156026629",
    "0.881113960675096565",
    "0.881878707600445372",
    "0.882643049361841259",
    "0.883406986388369725",
    "0.884170519108435000",
    "0.884933647949761485",
    "0.885696373339395195",
    "0.886458695703705187",
    "0.887220615468384993",
    "0.887982133058454047",
    "0.888743248898259106",
    "0.889503963411475668",
    "0.890264277021109390",
    "0.891024190149497497",
    "0.891783703218310190",
    "0.892542816648552049",
    "0.893301530860563436",
    "0.894059846274021889",
    "0.894817763307943516",
    "0.895575282380684383",
    "0.896332403909941900",
    "0.897089128312756206",
    "0.897845456005511542",
    "0.898601387403937629",
    "0.899356922923111037",
    "0.900112062977456557",
    "0.900866807980748558",
    "0.901621158346112355",
    "0.902375114486025558",
    "0.903128676812319433",
    "0.903881845736180244",
    "0.904634621668150606",
    "0.905387005018130823",
    "0.906138996195380231",
    "0.906890595608518529",
    "0.907641803665527117",
    "0.908392620773750418",
    "0.909143047339897209",
    "0.909893083770041942",
    "0.910642730469626059",
    "0.911391987843459311",
    "0.912140856295721065",
    "0.912889336229961619",
    "0.913637428049103499",
    "0.914385132155442768",
    "0.915132448950650315",
    "0.915879378835773161",
    "0.916625922211235740",
    "0.917372079476841193",
    "0.918117851031772650",
    "0.918863237274594512",
    "0.919608238603253732",
    "0.920352855415081084",
    "0.921097088106792437",
    "0.921840937074490028",
    "0.922584402713663717",
    "0.923327485419192259",
    "0.924070185585344554",
    "0.924812503605780907",
    "0.925554439873554280",
    "0.926295994781111538",
    "0.927037168720294696",
    "0.927777962082342162",
    "0.928518375257889974",
    "0.929258408636973038",
    "0.929998062609026360",
    "0.930737337562886276",
    "0.931476233886791679",
    "0.932214751968385239",
    "0.932952892194714628",
    "0.933690654952233734",
    "0.934428040626803875",
    "0.935165049603695011",
    "0.935901682267586953",
    "0.936637939002570563",
    "0.937373820192148961",
    "0.938109326219238721",
    "0.938844457466171067",
    "0.939579214314693063",
    "0.940313597145968808",
    "0.941047606340580617",
    "0.941781242278530206",
    "0.942514505339239875",
    "0.943247395901553680",
    "0.943979914343738615",
    "0.944712061043485774",
    "0.945443836377911529",
    "0.946175240723558688",
    "0.946906274456397661",
    "0.947636937951827620",
    "0.948367231584677654",
    "0.949097155729207924",
    "0.949826710759110811",
    "0.950555897047512070",
    "0.951284714966971967",
    "0.952013164889486428",
    "0.952741247186488175",
    "0.953468962228847862",
    "0.954196310386875209",
    "0.954923292030320134",
    "0.955649907528373879",
    "0.956376157249670136",
    "0.957102041562286169",
    "0.957827560833743932",
    "0.958552715431011186",
    "0.959277505720502617",
    "0.960001932068080938",
    "0.960725994839058005",
    "0.961449694398195920",
    "0.962173031109708131",
    "0.962896005337260534",
    "0.963618617443972573",
    "0.964340867792418326",
    "0.965062756744627606",
    "0.965784284662087044",
    "0.966505451905741174",
    "0.967226258835993524",
    "0.967946705812707687",
    "0.968666793195208406",
    "0.969386521342282646",
    "0.970105890612180667",
    "0.970824901362617096",
    "0.971543553950771991",
    "0.972261848733291908",
    "0.972979786066290962",
    "0.973697366305351887",
    "0.974414589805527092",
    "0.975131456921339714",
    "0.975847968006784673",
    "0.976564123415329717",
    "0.977279923499916470",
    "0.977995368612961477",
    "0.978710459106357240",
    "0.979425195331473263",
    "0.980139577639157085",
    "0.980853606379735311",
    "0.981567281903014647",
    "0.982280604558282924",
    "0.982993574694310128",
    "0.983706192659349422",
    "0.984418458801138161",
    "0.985130373466898920",
    "0.985841937003340502",
    "0.986553149756658954",
    "0.987264012072538576",
    "0.987974524296152932",
    "0.988684686772165853",
    "0.989394499844732442",
    "0.990103963857500071",
    "0.990813079153609386",
    "0.991521846075695295",
    "0.992230264965887969",
    "0.992938336165813825",
    "0.993646060016596520",
    "0.994353436858857938",
    "0.995060467032719167",
    "0.995767150877801487",
    "0.996473488733227347",
    "0.997179480937621337",
    "0.997885127829111170",
    "0.998590429745328646",
    "0.999295387023410627",
];

/// Computes an approximation of the two-logarithm of a number in the range [0.5, 1)
/// using Hermite interpolation of a lookup table
/// 
/// ## Inputs
/// * `x` - The value to compute the logarithm of (must be in the range [0.5, 1))
/// 
/// ## Outputs
/// * The logarithm of x
fn _log2_interpolated_one_to_two(x: Dec256) -> anyhow::Result<Dec256> {
    if x < Dec256::ONE || x >= Dec256::new_percent(200) {
        anyhow::bail!("input must be in the range [1, 2). got {}", x);
    }

    let table_size = Int256::new(TABLE_SIZE.into());

    // Compute index in LUT
    let pre_index = table_size.checked_mul_dec(x - Dec256::ONE)?;
    let index = pre_index.checked_into_prev()?.into_inner() as usize;
    let index = index.min((TABLE_SIZE - 2) as usize); // Avoid out-of-bounds access

    // Get x coordinates
    let x1 = Dec256::ONE + Dec256::checked_from_ratio(Int256::new((index as u128).into()), table_size)?;
    let x2 = x1 + Dec256::checked_from_ratio(Int256::ONE, table_size)?;

    // Get function values
    let y1 = Dec256::from_str(LOG2_LUT_ONE_TO_TWO[index])?;
    let y2 = Dec256::from_str(LOG2_LUT_ONE_TO_TWO[index + 1])?;

    // Compute derivatives at points
    // For log2(x), the derivative is 1/(x*ln(2))
    let m1 = Dec256::ONE.checked_div(x1.checked_mul(NATURAL_LOG_OF_TWO)?)?;
    let m2 = Dec256::ONE.checked_div(x2.checked_mul(NATURAL_LOG_OF_TWO)?)?;

    // Compute Hermite basis functions
    let t = (x - x1).checked_div(x2.checked_sub(x1)?)?;
    let t2 = t.checked_mul(t)?;
    let t3 = t2.checked_mul(t)?;

    // Compute the basis functions at t
    // h00 = 2t³ - 3t² + 1
    // h10 = t³ - 2t² + t
    // h01 = -2t³ + 3t²
    // h11 = t³ - t²
    let h00 = Dec256::new(2).checked_mul(t3)?.checked_sub(Dec256::new(3).checked_mul(t2)?)?.checked_add(Dec256::ONE)?;
    let h10 = t3.checked_sub(Dec256::new(2).checked_mul(t2)?)?.checked_add(t)?;
    let h01 = Dec256::new(-2).checked_mul(t3)?.checked_add(Dec256::new(3).checked_mul(t2)?)?;
    let h11 = t3.checked_sub(t2)?;

    // Compute final interpolated value
    // y(x) = h00 * y1 + h10 * (x2 - x1) * m1 + h01 * y2 + h11 * (x2 - x1) * m2
    let dx = x2.checked_sub(x1)?;
    let result = h00.checked_mul(y1)?
        .checked_add(h10.checked_mul(dx)?.checked_mul(m1)?)?
        .checked_add(h01.checked_mul(y2)?)?
        .checked_add(h11.checked_mul(dx)?.checked_mul(m2)?)?;

    Ok(result)
}

/// Computes the base-2 logarithm of an I256 value
/// 
/// This implementation splits the calculation into integer and fractional parts:
/// For a number x = 2^(i + f) where i is integer and 0 ≤ f < 1
/// log2(x) = i + f
/// 
/// The integer part i is computed using checked_ilog2
/// The fractional part f is computed using a lookup table and linear interpolation
/// 
/// ## Inputs
/// * `x` - The I256 value to compute the logarithm of (must be positive)
/// 
/// ## Outputs
/// * `Ok(Dec256)` - The base-2 logarithm of x
/// * `Err` - If x is not positive or numerical error occurs
pub fn log2_i256(x: I256) -> anyhow::Result<Dec256> {
    // Ensure input is positive
    anyhow::ensure!(x > I256::ZERO, "Logarithm is only defined for positive numbers");

    // Special case for x = 1
    if x == I256::ONE {
        return Ok(Dec256::ZERO);
    }

    // Get the integer part of log2(x)
    let i = x.checked_ilog2().ok_or_else(|| anyhow::anyhow!("ilog2 failed"))?;
    let i_dec = Dec256::new(i as i128);

    // If x is a perfect power of 2, we're done
    if x == I256::TWO << (i - 1) {
        return Ok(i_dec);
    }


    // Calculate x/2^i which will be in [1,2)
    let two_to_i = I256::TWO.checked_pow(i).ok_or_else(|| anyhow::anyhow!("pow failed"))?;
    let normalized = Dec256::checked_from_ratio(Int256::new(x), Int256::new(two_to_i))?;

    // Now we need to find f where 2^f = normalized
    // We'll use Newton's method to solve 2^f - normalized = 0
    let f = _log2_interpolated_one_to_two(normalized)?;
    

    // Combine integer and fractional parts
    Ok(i_dec.checked_add(f)?)
}

/// Computes the base-10 logarithm of an I256 value
/// 
/// Uses the change of base formula: log10(x) = log2(x) / log2(10)
/// 
/// ## Inputs
/// * `x` - The I256 value to compute the logarithm of (must be positive)
/// 
/// ## Outputs
/// * `Ok(Dec256)` - The base-10 logarithm of x
/// * `Err` - If x is not positive or numerical error occurs
pub fn log10_i256(x: I256) -> anyhow::Result<Dec256> {
    let log2_x = log2_i256(x)?;
    Ok(log2_x.checked_div(LOG2_OF_TEN)?)
}

/// Computes the base-10 logarithm of a Dec256 value
/// 
/// ## Inputs
/// * `x` - The Dec256 value to compute the logarithm of
/// 
/// ## Outputs
/// * `Ok(Dec256)` - The base-10 logarithm of x
pub fn log10_dec256(x: Dec256) -> anyhow::Result<Dec256> {
    let inner_log = log10_i256(x.into_inner())?;
    let precision_log = Dec256::new(Dec256::DECIMAL_PLACES as i128);
    Ok(inner_log.checked_sub(precision_log)?)
}

/// Implements Newton's method for finding roots of equations
///
/// ## Inputs
/// * `f` - Function to find root of
/// * `df` - Derivative of the function
/// * `x0` - Initial guess
/// * `tol` - Tolerance for convergence
/// * `max_iter` - Maximum number of iterations
///
/// ## Outputs
/// * `Ok(Dec256)` - Solution found within tolerance
/// * `Err` - If no solution found within max iterations or numerical error occurs
pub fn newton_method<F, DF>(
    f: F,
    df: DF,
    x0: Dec256,
    tol: Dec256,
    max_iter: u32,
) -> anyhow::Result<Dec256>
where
    F: Fn(Dec256) -> anyhow::Result<Dec256>,
    DF: Fn(Dec256) -> anyhow::Result<Dec256>,
{
    let mut x = x0;
    let tolerance = tol;

    for i in 0..max_iter {
        println!("x_{}: {}", i, x);

        // Calculate f(x) and f'(x)
        let fx = f(x)?;
        let dfx = df(x)?;

        // Check if derivative is zero to avoid division by zero
        anyhow::ensure!(
            !dfx.is_zero(),
            "Derivative is zero - cannot continue iteration"
        );

        println!("fx: {}", fx);
        println!("dfx: {}", dfx);

        // Calculate next iteration: x = x - f(x)/f'(x)
        let quotient = fx.checked_div(dfx)?;

        println!("quotient: {}", quotient);
        let step = quotient.checked_mul(Dec256::new_percent(50))?; // Add 50% damping
        x = x.checked_sub(step)?;

        println!("tolerance: {}", tolerance);
        println!("fx.checked_abs(): {}", fx.checked_abs()?);

        // Check for convergence using absolute value
        if fx.checked_abs()? <= tolerance {
            return Ok(x);
        }
    }

    anyhow::bail!("Failed to converge within {} iterations", max_iter)
}

/// Implements the secant method for finding roots of equations
///
/// The secant method approximates the derivative using two points instead of requiring
/// an explicit derivative function. This makes it useful when derivatives are difficult
/// to compute or expensive.
///
/// ## Inputs
/// * `f` - Function to find root of
/// * `x0` - First initial guess
/// * `x1` - Second initial guess
/// * `tol` - Tolerance for convergence
/// * `max_iter` - Maximum number of iterations
///
/// ## Outputs
/// * `Ok(Dec256)` - Solution found within tolerance
/// * `Err` - If no solution found within max iterations or numerical error occurs
pub fn secant_method<F>(
    f: F,
    x0: Dec256,
    x1: Dec256,
    tol: Dec256,
    max_iter: u32,
) -> anyhow::Result<Dec256>
where
    F: Fn(Dec256) -> anyhow::Result<Dec256>,
{
    let mut x_prev = x0;
    let mut x_curr = x1;
    let tolerance = tol;

    println!("pre calc f(x0)");

    // Calculate f(x0)
    let mut f_prev = f(x_prev)?;
    
    println!("f({}) = {}", x_prev, f_prev);
    for i in 0..max_iter {
        println!("x_{}: {}", i, x_curr);

        // Calculate f(x_curr)
        let f_curr = f(x_curr)?;

        println!("x_prev: {}", x_prev);
        println!("x_curr: {}", x_curr);

        println!("f(x_prev) = {}", f_prev);
        println!("f(x_curr) = {}", f_curr);

        // Check for convergence using absolute value
        if f_curr.checked_abs()? <= tolerance {
            return Ok(x_curr);
        }

        // Calculate the difference between current and previous x values
        let dx = x_curr.checked_sub(x_prev)?;

        // Check if the difference is too small to avoid division by zero
        anyhow::ensure!(
            !dx.is_zero(),
            "Difference between iterations is zero - cannot continue"
        );

        // Calculate the difference between current and previous function values
        let df = f_curr.checked_sub(f_prev)?;

        // Check if the difference is too small to avoid division by zero
        anyhow::ensure!(
            !df.is_zero(),
            "Difference between function values is zero - cannot continue"
        );

        // Calculate the approximation of the derivative
        let approx_derivative = df.checked_div(dx)?;

        // Calculate next iteration: x_next = x_curr - f(x_curr)/approx_derivative
        let quotient = f_curr.checked_div(approx_derivative)?;

        println!("approx_derivative: {}", approx_derivative);
        println!("quotient: {}", quotient);

        // Apply damping factor for stability (optional)
        let step = quotient.checked_mul(Dec256::new_percent(80))?; // 80% damping

        println!("step: {}", step);

        // Update values for next iteration
        x_prev = x_curr;
        f_prev = f_curr;
        x_curr = x_curr.checked_sub(step)?;

        println!("tolerance: {}", tolerance);
        println!("f_curr.checked_abs(): {}", f_curr.checked_abs()?);
    }

    anyhow::bail!("Failed to converge within {} iterations", max_iter)
}
}
