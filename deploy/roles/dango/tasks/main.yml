- name: Install nginx as a proxy
  become: true
  become_user: root
  apt:
    name: nginx
    state: present

- name: Install psycopg2 so Ansible can talk to Postgres
  become: true
  become_user: root
  apt:
    name: python3-psycopg2
    state: present

- name: Create Dango DB user
  community.postgresql.postgresql_user:
    name: "{{ dango_db_user }}"
    password: "{{ dango_db_password }}"
    login_user: "{{ db_user }}"
    login_password: "{{ db_pass }}"
    login_host: "{{ db_host }}"
    login_port: "{{ db_port }}"
    state: present

- name: Create Dango production database
  community.postgresql.postgresql_db:
    name: "{{ dango_db_name }}"
    owner: "{{ dango_db_user }}"
    login_user: "{{ db_user }}"
    login_password: "{{ db_pass }}"
    login_host: "{{ db_host }}"
    login_port: "{{ db_port }}"
    state: present

- name: Grant ALL privileges on the Dango database to the Dango user
  community.postgresql.postgresql_privs:
    type: database
    privs: ALL
    roles: "{{ dango_db_user }}"
    login_db: "{{ dango_db_name }}"
    login_user: "{{ db_user }}"
    login_password: "{{ db_pass }}"
    login_host: "{{ db_host }}"
    login_port: "{{ db_port }}"
    state: present

- name: Copy all files from dango role
  copy:
    src: "{{ playbook_dir }}/roles/dango/files/config"
    dest: "{{ dango_target_dir }}"
    mode: '0644'

- name: Ensure backend network exists
  community.docker.docker_network:
    name: backend
    driver: bridge
    state: present

- name: Deploy dango container
  docker_container:
    name: dango
    image: ghcr.io/left-curve/left-curve/dango:latest
    user: "{{ ansible_user_uid }}:{{ ansible_user_gid }}"
    pull: always           # always pull the image
    recreate: true         # destroy+recreate if anything changes
    restart_policy: unless-stopped
    state: started
    env:
      HOME: /app
      INDEXER__DATABASE_URL: "postgres://{{ dango_db_user }}:{{ dango_db_password }}@{{ dango_db_host }}:{{ db_port }}/{{ dango_db_name }}"
      SENTRY__ENABLED: "false"
      SENTRY__DSN: "https://your-dsn-here"
      SENTRY__ENVIRONMENT: "production"
    ports:
      - "127.0.0.1:8080:8080"
      # - "127.0.0.1:26658:26658"
    volumes:
      - "{{ dango_target_dir }}:/app/.dango"
    tty: true

- name: Ensure backend network exists
  community.docker.docker_network:
    name: backend
    driver: bridge
    state: present

- name: Connect Postgres and Dango containers to backend network
  community.docker.docker_network:
    name: backend
    state: present
    connected:
      - dango
    appends: yes
