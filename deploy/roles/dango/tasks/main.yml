- name: Ensure target dir exists
  tags: setup
  vars:
    dango_target_dir: "{{ ansible_env.HOME }}/{{ item[0] }}/dango"
  file:
    path: "{{ dango_target_dir }}/{{ item[1] }}"
    state: directory
    mode: '0755'
  loop: "{{ dango_networks | product(['config']) | list }}"

- name: Install psycopg2 so Ansible can talk to Postgres
  tags: setup
  become: true
  become_user: root
  apt:
    name: python3-psycopg2
    state: present

- name: Create psql Dango DB user
  tags: setup
  community.postgresql.postgresql_user:
    name: "{{ dango_db_user }}"
    password: "{{ dango_db_password }}"
    login_user: "{{ db_user }}"
    login_password: "{{ db_pass }}"
    login_host: "{{ db_host }}"
    login_port: "{{ db_port }}"
    state: present

- name: Create psql Dango production database
  tags: setup
  community.postgresql.postgresql_db:
    name: "{{ dango_network }}_{{ dango_db_name }}"
    owner: "{{ dango_db_user }}"
    login_user: "{{ db_user }}"
    login_password: "{{ db_pass }}"
    login_host: "{{ db_host }}"
    login_port: "{{ db_port }}"
    state: present
  loop: "{{ dango_networks }}"
  loop_control:
    loop_var: dango_network

- name: Grant psql ALL privileges on the Dango database to the Dango user
  tags: setup
  community.postgresql.postgresql_privs:
    type: database
    privs: ALL
    roles: "{{ dango_db_user }}"
    login_db: "{{ dango_network }}_{{ dango_db_name }}"
    login_user: "{{ db_user }}"
    login_password: "{{ db_pass }}"
    login_host: "{{ db_host }}"
    login_port: "{{ db_port }}"
    state: present
  loop: "{{ dango_networks }}"
  loop_control:
    loop_var: dango_network

- name: Debug variables
  debug:
    msg: "Network: {{ dango_network }}, DB name: {{ dango_network }}_{{ dango_clickhouse_name }} {{ clickhouse_password }}"
  loop: "{{ dango_networks }}"
  loop_control:
    loop_var: dango_network

- name: Create clickhouse database
  community.clickhouse.clickhouse_db:
    name: "{{ dango_network }}_{{ dango_clickhouse_name }}"
    state: present
    login_host: 127.0.0.1
    login_port: 9000
    login_user: default
    login_password: "{{ clickhouse_password }}"
  loop: "{{ dango_networks }}"
  loop_control:
    loop_var: dango_network

- name: Create clickhouse dango user
  community.clickhouse.clickhouse_user:
    login_host: 127.0.0.1
    login_port: 9000
    login_user: default
    login_password: "{{ clickhouse_password }}"
    name: dango
    password: "{{ dango_clickhouse_password }}"
    update_password: always

- name: Grant clickhouse database access to user
  community.clickhouse.clickhouse_client:
    execute: "GRANT ALL ON {{ dango_network }}_{{ dango_clickhouse_name }}.* TO {{ dango_clickhouse_user }}"
    login_host: 127.0.0.1
    login_port: 9000
    login_user: default
    login_password: "{{ clickhouse_password }}"
  loop: "{{ dango_networks }}"
  loop_control:
    loop_var: dango_network

- name: Allow unlimited concurrent queries for dango
  community.clickhouse.clickhouse_client:
    login_host: 127.0.0.1
    login_port: 9000
    login_user: default
    login_password: "{{ clickhouse_password }}"
    execute: >
      ALTER USER dango
      SETTINGS max_concurrent_queries_for_user = 0

- name: Copy app.toml
  vars:
    dango_target_dir: "{{ ansible_env.HOME }}/{{ dango_network }}/dango"
    cometbft_host: "{{ dango_network }}_cometbft"
    cometbft_rpc_port: "{{ ports[dango_network].cometbft_rpc_port }}"
  tags: setup
  template:
    src: "{{ playbook_dir }}/roles/dango/templates/{{ dango_network }}/config/app.toml"
    dest: "{{ dango_target_dir }}/config/app.toml"
  loop: "{{ dango_networks }}"
  loop_control:
    loop_var: dango_network

- name: Ensure backend network exists
  tags: setup
  community.docker.docker_network:
    name: "{{ dango_network }}_backend"
    driver: bridge
    state: present
  loop: "{{ dango_networks }}"
  loop_control:
    loop_var: dango_network

- name: Connect Postgres and Clickhouse container to extra network
  community.docker.docker_network:
    name: "{{ dango_network }}_backend"
    connected:
      - "{{ docker_db_host }}"
      - "{{ docker_clickhouse_host }}"
    appends: true
  loop: "{{ dango_networks }}"
  loop_control:
    loop_var: dango_network

- name: Allow TCP ports
  tags: setup
  become: true
  become_user: root
  ufw:
    rule: allow
    direction: in
    port: "{{ ports[dango_network].dango_port }}"
    proto: tcp
  loop: "{{ dango_networks }}"
  loop_control:
    loop_var: dango_network

- name: Login to GHCR
  community.docker.docker_login:
    registry: ghcr.io
    username: "{{ ghcr_user }}"
    password: "{{ ghcr_token }}"

- name: Deploy dango container
  vars:
    dango_target_dir: "{{ ansible_env.HOME }}/{{ dango_network }}/dango"
    dango_port: "{{ ports[dango_network].dango_port }}"
  docker_container:
    name: "{{ dango_network }}_dango"
    image: "ghcr.io/left-curve/left-curve/dango:{{ dango_image_tag }}"
    user: "{{ ansible_user_uid }}:{{ ansible_user_gid }}"
    pull: always           # always pull the image
    recreate: true         # destroy+recreate if anything changes
    restart_policy: unless-stopped
    state: started
    env:
      HOME: /app
      INDEXER__DATABASE__URL: "postgres://{{ dango_db_user }}:{{ dango_db_password }}@{{ docker_db_host }}:{{ db_port }}/{{ dango_network }}_{{ dango_db_name }}"
      INDEXER__CLICKHOUSE__USER: "{{ dango_clickhouse_user }}"
      INDEXER__CLICKHOUSE__PASSWORD: "{{ dango_clickhouse_password }}"
      INDEXER__CLICKHOUSE__DATABASE: "{{ dango_network }}_{{ dango_clickhouse_name }}"
      SENTRY__ENABLED: "true"
      SENTRY__DSN: "{{ lookup('env','SENTRY__DSN') }}"
      SENTRY__ENVIRONMENT: "production-{{ dango_network }}"
    ports:
      - "{{ dango_port }}:8080"
      - "{{ tailscale_ip }}:9191:9191"
    volumes:
      - "{{ dango_target_dir }}:/app/.dango"
    networks:
      - name: "{{ dango_network }}_backend"
    tty: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8080/up"]
      interval: 10s
      timeout: 5s
      retries: 3
  loop: "{{ dango_networks }}"
  loop_control:
    loop_var: dango_network

