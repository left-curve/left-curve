# expects: mon (name,path,expect), cf_monitors, cloudflare_account_id, cloudflare_api_token

- name: Ensure Cloudflare monitor
  block:
    - name: Build desired monitor spec (typed)
      set_fact:
        desired_monitor: >-
          {{
            {
              'type': 'https',
              'method': 'GET',
              'path': mon.path,
              'expected_codes': mon.expect,
              'interval': (mon.interval | default(15) | int),
              'timeout': (mon.timeout | default(5) | int),
              'retries': (mon.retries | default(2) | int),
              'description': mon.name
            }
          }}

    - name: Find existing monitor by name+path
      set_fact:
        existing_mon: >-
          {{
            (cf_monitors.json.result
             | selectattr('description','equalto', mon.name)
             | selectattr('path','equalto', mon.path)
             | list | first) | default(None)
          }}

    - name: Set existing monitor id when found
      when: existing_mon is mapping
      set_fact:
        existing_id: "{{ existing_mon.id }}"

    - name: Create monitor if missing
      when: existing_id is not defined
      uri:
        url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/load_balancers/monitors"
        method: POST
        headers:
          Authorization: "Bearer {{ cloudflare_api_token }}"
          Content-Type: "application/json"
        body_format: json
        body: "{{ desired_monitor }}"
      register: create_mon

    - name: Expose monitor id fact per service
      set_fact:
        "monitor_id_{{ mon.name }}": "{{ existing_id | default(create_mon.json.result.id) }}"

    - name: Update monitor to desired state (always)
      when: existing_id is defined
      uri:
        url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/load_balancers/monitors/{{ existing_id }}"
        method: PUT
        headers:
          Authorization: "Bearer {{ cloudflare_api_token }}"
          Content-Type: "application/json"
        body_format: json
        body: "{{ desired_monitor }}"
      register: update_mon
      failed_when: update_mon.status not in [200]
      changed_when: false

    - name: Capture created monitor id when created
      when: create_mon is defined and create_mon.json is defined and not (create_mon.skipped | default(false))
      set_fact:
        created_id: "{{ create_mon.json.result.id }}"

    - debug:
        msg:
          name: "{{ mon.name }}"
          path: "{{ mon.path }}"
          existing_id: "{{ existing_id | default('none') }}"
          created_id: "{{ created_id | default('n/a') }}"
          update_status: "{{ (update_mon.status if (update_mon is defined and update_mon.status is defined) else 'n/a') }}"
  delegate_to: localhost
  become: false
  run_once: true
