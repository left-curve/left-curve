# - name: Abort if password is empty
#   assert:
#     that:
#       - clickhouse_password is defined
#       - clickhouse_password | length > 0
#     fail_msg: "CLICKHOUSE_PASSWORD must be set and non-empty, aborting deployment."

# - name: Check if deployment already exists
#   stat:
#     path: "{{ ansible_env.HOME }}/deployments/{{ deployment_name }}/.env"
#   register: env_file_exists
#
# - name: Read existing ports from .env as key=value pairs
#   shell: |
#     grep -E '^(DANGO_PORT|DANGO_METRICS_PORT|FAUCET_PORT|DANGO_FRONTEND_PORT|QUEST_PORT|COMETBFT_P2P_PORT|COMETBFT_RPC_PORT|COMETBFT_ABCI_PORT|COMETBFT_METRICS_PORT)=' {{ ansible_env.HOME }}/deployments/{{ deployment_name }}/.env | \
#     awk -F= '{print tolower($1) "=" $2}' | \
#     sed 's/cometbft_/cometbft_/g'
#   register: existing_port_pairs
#   when: env_file_exists.stat.exists
#
# - name: Set port facts from existing .env
#   set_fact:
#     "{{ item.split('=')[0] }}": "{{ item.split('=')[1] }}"
#     skip_port_discovery: true
#   loop: "{{ existing_port_pairs.stdout_lines }}"
#   when: env_file_exists.stat.exists and existing_port_pairs.stdout_lines | length > 0
#
# - name: Create deployment directory
#   file:
#     path: "{{ ansible_env.HOME }}/deployments/{{ deployment_name }}/configs/{{ item }}"
#     state: directory
#   loop: [clickhouse, dango, cometbft]
#
# - name: Login to GHCR
#   community.docker.docker_login:
#     registry: ghcr.io
#     username: "{{ ghcr_user }}"
#     password: "{{ ghcr_token }}"

# Only copy configs and do port discovery if not skipping
- block:
  # - name: Copy config files
  #   become: true
  #   become_user: root
  #   block:
  #     - template:
  #         src: "{{ item.src }}"
  #         dest: "{{ ansible_env.HOME }}/deployments/{{ deployment_name }}/configs/{{ item.dest }}"
  #         owner: "{{ deploy_user }}"
  #       loop:
  #         - { src: "{{ dango_network}}/config/dango/app.toml", dest: "dango/app.toml" }
  #         - { src: "{{ dango_network}}/config/cometbft/config.toml", dest: "cometbft/config.toml" }
  #         - { src: "{{ dango_network}}/config/cometbft/genesis.json", dest: "cometbft/genesis.json" }
  #         - { src: "{{ dango_network}}/config/cometbft/node_key.json", dest: "cometbft/node_key.json" }
  #         - { src: "{{ dango_network}}/config/cometbft/priv_validator_key.json", dest: "cometbft/priv_validator_key.json" }
  #         - { src: "clickhouse/config.xml", dest: "clickhouse/config.xml" }
  #         - { src: "clickhouse/users.xml", dest: "clickhouse/users.xml" }
  #
  # - name: Generate docker-compose.yml
  #   become: true
  #   become_user: root
  #   template:
  #     src: docker-compose.yml
  #     dest: "{{ ansible_env.HOME }}/deployments/{{ deployment_name }}/docker-compose.yml"
  #     owner: "{{ deploy_user }}"
  #
  # - name: Generate .env
  #   become: true
  #   become_user: root
  #   template:
  #     src: env.j2
  #     dest: "{{ ansible_env.HOME }}/deployments/{{ deployment_name }}/.env"
  #     owner: "{{ deploy_user }}"
  #
  # - name: Deploy dango stack first to get binded ports
  #   community.docker.docker_compose_v2:
  #     project_name: "{{ deployment_name }}"
  #     project_src: "{{ ansible_env.HOME }}/deployments/{{ deployment_name }}"
  #     pull: always
  #     recreate: always
  #     services:
  #       - db
  #       - faucet-bot
  #       - clickhouse
  #       - dango
  #       - cometbft
  #   when: not traefik_enabled
  #
  # - name: Get dango and faucet assigned ports
  #   shell: |
  #     docker port {{ deployment_name }}-dango-1 8080 | cut -d: -f2
  #     docker port {{ deployment_name }}-faucet-bot-1 8082 | cut -d: -f2
  #   register: assigned_ports
  #   when: not traefik_enabled
  #
  # - name: Set dango and faucet port facts
  #   set_fact:
  #     dango_port: "{{ assigned_ports.stdout_lines[0] }}"
  #     faucet_port: "{{ assigned_ports.stdout_lines[1] }}"
  #   when: not traefik_enabled
  #
  # - name: Generate .env with the right ports
  #   become: true
  #   become_user: root
  #   template:
  #     src: env.j2
  #     dest: "{{ ansible_env.HOME }}/deployments/{{ deployment_name }}/.env"
  #     owner: "{{ deploy_user }}"
  #   when: not traefik_enabled
  #
  # - name: Deploy all
  #   community.docker.docker_compose_v2:
  #     project_name: "{{ deployment_name }}"
  #     project_src: "{{ ansible_env.HOME }}/deployments/{{ deployment_name }}"
  #     wait: true
  #     wait_timeout: 300
  #
  # - name: Get frontend assigned ports
  #   shell: |
  #     docker port {{ deployment_name }}-dango-frontend-1 80 | cut -d: -f2
  #   register: assigned_ports
  #   when: not traefik_enabled
  #
  # - name: Set frontend port facts
  #   set_fact:
  #     dango_frontend_port: "{{ assigned_ports.stdout_lines[0] }}"
  #   when: not (skip_port_discovery | traefik_enabled | default(false))

# - name: Generate .env
#   become: true
#   become_user: root
#   template:
#     src: env.j2
#     dest: "{{ ansible_env.HOME }}/deployments/{{ deployment_name }}/.env"
#     owner: "{{ deploy_user }}"
#
# # Quick redeploy for existing deployments
# - name: Deploy with new image tag
#   community.docker.docker_compose_v2:
#     project_name: "{{ deployment_name }}"
#     project_src: "{{ ansible_env.HOME }}/deployments/{{ deployment_name }}"
#     pull: always
#     recreate: always
#   when: (skip_port_discovery | default(false)) && not traefik_enabled

# - name: Update Traefik dynamic config
#   become: true
#   become_user: root
#   template:
#     src: traefik-services.yml
#     dest: "{{ traefik_dir }}/config/{{ dango_network }}.yml"
#     owner: "{{ deploy_user }}"
#   when: traefik_enabled && not (github_pr_number is defined)

# - name: Create GitHub deployments
#   uri:
#     url: "https://api.github.com/repos/left-curve/left-curve/deployments"
#     method: POST
#     headers:
#       Authorization: "token {{ ghcr_token }}"
#       Accept: "application/vnd.github.v3+json"
#     body_format: json
#     body:
#       ref: "{{ github_sha }}"
#       environment: "pr-{{ github_pr_number }}-{{ item.name }}"
#       description: "{{ item.description }} for PR {{ github_pr_number }}"
#       auto_merge: false
#       required_contexts: []
#     status_code: [200, 201]
#   register: deployment_results
#   loop:
#     - { name: "frontend", description: "Frontend", url: "http://{{ tailscale_ip }}:{{ dango_frontend_port }}" }
#     - { name: "api", description: "Dango API", url: "http://{{ tailscale_ip }}:{{ dango_port }}" }
#     - { name: "faucet", description: "Faucet", url: "http://{{ tailscale_ip }}:{{ faucet_port }}" }
#   when: github_pr_number is defined
#
# - name: Set deployment statuses
#   uri:
#     url: "https://api.github.com/repos/left-curve/left-curve/deployments/{{ item.json.id }}/statuses"
#     method: POST
#     headers:
#       Authorization: "token {{ ghcr_token }}"
#       Accept: "application/vnd.github.v3+json"
#     body_format: json
#     body:
#       state: "success"
#       target_url: "{{ deployment_results.results[ansible_loop.index0].item.url }}"
#       description: "{{ deployment_results.results[ansible_loop.index0].item.description }} ready"
#       environment_url: "{{ deployment_results.results[ansible_loop.index0].item.url }}"
#     status_code: [200, 201]
#   loop: "{{ deployment_results.results }}"
#   loop_control:
#     extended: true
#   when: github_pr_number is defined and deployment_results.results is defined
#
# - name: Add deployment summary to GitHub
#   shell: |
#     cat >> $GITHUB_STEP_SUMMARY << 'EOF'
#     # ðŸš€ PR Deployment Summary
#     | Name | Result |
#     | ---- | ------ |
#     | **PR Number:** | `{{ github_pr_number }}` |
#     | **Status:** | âœ… Deployed successfully! |
#     | **Frontend:** | [http://{{ tailscale_ip }}:{{ dango_frontend_port }}](http://{{ tailscale_ip }}:{{ dango_frontend_port }}) |
#     | **Dango API:** | [http://{{ tailscale_ip }}:{{ dango_port }}](http://{{ tailscale_ip }}:{{ dango_port }}) |
#     | **Faucet:** | [http://{{ tailscale_ip }}:{{ faucet_port }}](http://{{ tailscale_ip }}:{{ faucet_port }}) |
#     | **Environment:** | `{{ deployment_name }}` |
#     | **Commit:** | `{{ github_sha }}` |
#     EOF
#   environment:
#     GITHUB_STEP_SUMMARY: "{{ ansible_env.GITHUB_STEP_SUMMARY | default('/dev/null') }}"
#   when: github_pr_number is defined

# - name: Display URLs
#   debug:
#     msg:
#       - "ðŸš€ Preview Deploy Ready!"
#       - "Frontend: http://{{ tailscale_ip }}:{{ dango_frontend_port }}"
#       - "Dango: http://{{ tailscale_ip }}:{{ dango_port }}"
#       - "Faucet: http://{{ tailscale_ip }}:{{ faucet_port }}"
#   when: github_pr_number is not defined and not traefik_enabled
