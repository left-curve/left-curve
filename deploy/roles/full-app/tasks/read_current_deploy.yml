- block:
    - name: Check file
      stat:
        path: "{{ ansible_env.HOME }}/deployments/{{ dango_network }}.json"
      register: traefik_json

    - name: Read current traefik deployment
      slurp:
        src: "{{ traefik_json.stat.path }}"
      register: current_deployment_raw
      when: traefik_json.stat.exists

    - name: Parse current traefik deployment
      set_fact:
        current_deployment: "{{ (current_deployment_raw.content | b64decode | from_json).current_deployment }}"
      when: traefik_json.stat.exists and current_deployment_raw is defined

    - debug:
        msg: "Current existing deployment is {{ current_deployment }} and keep_databases: {{ keep_databases }}"
      when: current_deployment is defined

    - name: Check if deployment already exists
      stat:
        path: "{{ ansible_env.HOME }}/deployments/{{ current_deployment }}/.env"
      register: env_file_exists
      when: current_deployment is defined and keep_databases

    - name: Read .env values for database names
      shell: |
        grep -E '^(POSTGRES_DATABASE|CLICKHOUSE_DATABASE)=' {{ ansible_env.HOME }}/deployments/{{ current_deployment }}/.env | \
        awk -F= '{print tolower($1) "=" $2}'
      register: existing_env_variables
      when: current_deployment is defined and keep_databases and env_file_exists.stat.exists

    - name: Set facts from existing .env
      set_fact:
        "{{ item.split('=')[0] }}": "{{ item.split('=')[1] }}"
      loop: "{{ existing_env_variables.stdout_lines }}"
      when: current_deployment is defined and keep_databases and env_file_exists.stat.exists

    - name: Read .env values for system wide directories directories
      shell: |
        grep -E '^(DANGO_DIRECTORY|COMETBFT_DIRECTORY)=' {{ ansible_env.HOME }}/deployments/{{ current_deployment }}/.env | \
        awk -F= '{print tolower($1) "=" $2}'
      register: existing_env_variables
      when: current_deployment is defined and env_file_exists.stat.exists and system_wide_directories

    - name: Set facts from existing .env
      set_fact:
        "{{ item.split('=')[0] }}": "{{ item.split('=')[1] }}"
      loop: "{{ existing_env_variables.stdout_lines }}"
      when: current_deployment is defined and env_file_exists.stat.exists and system_wide_directories

  when: not reset_data
