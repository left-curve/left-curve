# Delete existing
# - name: Stop and remove old Postgres container
#   community.docker.docker_container:
#     name: "{{ container_name }}"
#     state: absent
#
# - name: ✂️ Delete host data directory so Postgres re-initializes
#   become: true
#   become_user: root
#   ansible.builtin.file:
#     path: "{{ data_dir }}"
#     state: absent

- name: install docker & python3-docker
  apt:
    name:
      - docker.io
      - python3-docker
    state: present
    update_cache: yes
  become: true

- name: add deploy to docker group
  user:
    name: "{{ deploy_user }}"
    groups: docker
    append: yes
  become: true

- name: Abort if DB password is empty
  assert:
    that:
      - db_password is defined
      - db_password | length > 0
    fail_msg: "DB_PASSWORD must be set and non-empty, aborting deployment."

- name: run Postgres container as deploy
  community.docker.docker_container:
    name: "{{ container_name }}"
    image: "postgres:{{ psql_version }}"
    env:
      POSTGRES_USER: "{{ lookup('env','DB_USER', default='postgres') }}"
      POSTGRES_PASSWORD: "{{ db_password }}"
    volumes:
      - "{{ data_dir }}:/var/lib/postgresql/data"
    published_ports:
      - "127.0.0.1:{{ host_port }}:5432"
    restart_policy: unless-stopped
    state: started
  become: true
  become_user: "{{ deploy_user }}"

- name: Ensure backend network exists
  community.docker.docker_network:
    name: backend
    driver: bridge
    state: present

- name: Connect Postgres and Dango containers to backend network
  community.docker.docker_network:
    name: backend
    state: present
    connected:
      - postgres
    appends: yes
