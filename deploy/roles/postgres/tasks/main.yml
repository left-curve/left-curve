# Delete existing
# - name: Stop and remove old Postgres container
#   community.docker.docker_container:
#     name: "{{ container_name }}"
#     state: absent
#
# - name: ✂️ Delete host data directory so Postgres re-initializes
#   become: true
#   become_user: root
#   ansible.builtin.file:
#     path: "{{ data_dir }}"
#     state: absent

- name: Abort if DB password is empty
  assert:
    that:
      - db_password is defined
      - db_password | length > 0
    fail_msg: "DB_PASSWORD must be set and non-empty, aborting deployment."

- name: Ensure directories exists
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop: ["{{ config_dir }}"]

- name: Copy postgres config
  become: true
  become_user: root
  copy:
    src: "{{ item }}"
    dest: "{{ config_dir }}/{{ item }}"
    mode: '0644'
    owner: '{{ deploy_user }}'
  loop:
    - postgresql.conf
    - init.sql

- name: Create postgres network
  docker_network:
    name: postgres

- name: Deploy postgres container
  docker_container:
    name: "{{ container_name }}"
    image: "postgres:{{ psql_version }}"
    restart_policy: unless-stopped
    state: started
    networks:
      - name: postgres
    env:
      POSTGRES_USER: "{{ lookup('env','DB_USER', default='postgres') }}"
      POSTGRES_PASSWORD: "{{ db_password }}"
      POSTGRES_INITDB_ARGS: "-c include=/etc/postgresql/postgresql.conf"
    ports:
      - "127.0.0.1:{{ host_port }}:5432"
    volumes:
      - "{{ data_dir }}:/var/lib/postgresql/data"
      - "{{ config_dir }}/postgresql.conf:/etc/postgresql/postgresql.conf:ro"
      - "{{ config_dir }}/init.sql:/docker-entrypoint-initdb.d/init.sql:ro"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "{{ lookup('env','DB_USER', default='postgres') }}", "-q"]
      interval: 2s
      timeout: 5s
      retries: 10

- name: Deploy postgres exporter
  docker_container:
    name: postgres-exporter
    image: prometheuscommunity/postgres-exporter:latest
    restart_policy: unless-stopped
    state: started
    networks:
      - name: postgres
    env:
      DATA_SOURCE_URI: "{{ container_name }}:5432/postgres?sslmode=disable"
      DATA_SOURCE_USER: "{{ lookup('env','DB_USER', default='postgres') }}"
      DATA_SOURCE_PASS: "{{ db_password }}"
    ports:
      - "{{ tailscale_ip }}:9187:9187"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
