name: Cleanup PR

on:
  pull_request:
    types: [closed]

jobs:
  cleanup-deployment:
    runs-on: [self-hosted]
    permissions:
      packages: write
      deployments: write

    steps:
      - name: Delete PR deployments
        run: |
          ENVIRONMENTS=("preview-dango-frontend" "preview-dango-api" "preview-dango-metrics" "preview-faucet-bot" "preview-cometbft-p2p" "preview-cometbft-rpc" "preview-cometbft-abci" "preview-cometbft-metrics")

          for env in "${ENVIRONMENTS[@]}"; do
            echo "Checking environment: ${env}"
            page=1
            while true; do
              # Fetch page with per_page=100 to minimize requests
              response=$(curl -s \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/deployments?environment=${env}&page=${page}&per_page=100")

              # Check if page is empty
              if [ "$(echo "$response" | jq '. | length')" -eq 0 ]; then
                break
              fi

              # Extract deployment IDs for this PR
              DEPLOYMENT_IDS=$(echo "$response" | \
                jq -r --arg pr "PR ${{ github.event.pull_request.number }}" \
                  '.[] | select(.description | contains($pr)) | .id')

              # Deactivate deployments found on this page
              for id in $DEPLOYMENT_IDS; do
                if [ "$id" != "null" ] && [ -n "$id" ]; then
                  echo "Deactivating deployment ID: $id in environment: ${env}"
                  curl -X POST \
                    -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Accept: application/vnd.github.v3+json" \
                    "https://api.github.com/repos/${{ github.repository }}/deployments/${id}/statuses" \
                    -d '{"state":"inactive","description":"PR closed - deployment deactivated"}'
                fi
              done

              ((page++))
            done
          done

      - name: Delete PR container images
        run: |
          # Get PR commits
          PR_COMMITS=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/commits" \
            | jq -r '.[].sha')

          # Function to delete images by tag
          delete_image_versions() {
            local package=$1
            local tag=$2

            # Get version ID for this tag
            version_id=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/orgs/left-curve/packages/container/${package}/versions" \
              | jq -r --arg tag "$tag" '.[] | select(.metadata.container.tags[]? == $tag) | .id')

            if [ "$version_id" != "null" ] && [ -n "$version_id" ]; then
              echo "Deleting $package:$tag (ID: $version_id)"
              curl -X DELETE \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/orgs/left-curve/packages/container/${package}/versions/${version_id}"
            else
              echo "Version $package:$tag not found"
            fi
          }

          # Delete pr-latest tags
          delete_image_versions "left-curve%2Fdango" "pr-${{ github.event.pull_request.number }}-latest"
          delete_image_versions "left-curve%2Fdango-frontend" "pr-${{ github.event.pull_request.number }}-latest"

          # Delete commit-specific images
          for commit in $PR_COMMITS; do
            echo "Processing commit: $commit"
            delete_image_versions "left-curve%2Fdango" "$commit"
            delete_image_versions "left-curve%2Fdango" "$commit-amd64"
            delete_image_versions "left-curve%2Fdango" "$commit-arm64"
            delete_image_versions "left-curve%2Fdango-frontend" "$commit"
            delete_image_versions "left-curve%2Fdango-frontend" "$commit-amd64"
            delete_image_versions "left-curve%2Fdango-frontend" "$commit-arm64"
          done

      - name: Install Ansible
        run: |
          pipx install ansible
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
          ln -sf ~/.local/pipx/venvs/ansible/bin/ansible-galaxy ~/.local/bin/ansible-galaxy
          ln -sf ~/.local/pipx/venvs/ansible/bin/ansible-playbook ~/.local/bin/ansible-playbook

      - name: Install collections
        run: |
          ansible-galaxy collection install -r deploy/requirements.yml

      - name: Cleanup actual containers
        run: |
          cd deploy
          ansible-playbook delete-full-app.yml -e deployment_name=pr-${{ github.event.pull_request.number }}
