name: Rust

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GIT_COMMIT: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
  CARGO_TERM_COLOR: always

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
      - "develop"
    paths:
      - ".github/workflows/rust.yml"
      - "deploy/**"
      - "dango/**"
      - "docker/**"
      - "grug/**"
      - "hyperlane/**"
      - "indexer/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "clippy.toml"
      - "rustfmt.toml"
  pull_request:
    branches:
      - "*"
    paths:
      - ".github/workflows/rust.yml"
      - "deploy/**"
      - "dango/**"
      - "docker/**"
      - "grug/**"
      - "hyperlane/**"
      - "indexer/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "clippy.toml"
      - "rustfmt.toml"

jobs:
  format:
    name: Format
    runs-on: [self-hosted]
    # Don't use this, it raises permissions issues on self hosted runners
    # container:
    #   image: rust:slim
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: rustfmt

      - name: Run rustfmt checks
        run: rustup run nightly cargo fmt --check --all

  clippy:
    name: Clippy
    runs-on: [self-hosted]
    needs: [format]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: rustfmt

      - name: Run clippy
        run: cargo clippy --bins --tests --benches --examples --all-features --all-targets -- -D warnings

  check-graphql-schema:
    name: Check GraphQL schema
    runs-on: [self-hosted]
    needs: [format]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
      - run: cargo run -p dango-httpd build_graphql_schema -- ./indexer/client/src/schemas/schema.graphql
      - name: Check schema
        run: |
          if ! git diff --exit-code ./indexer/client/src/schemas/schema.graphql; then
            echo "::error::GraphQL schema out of date"
            exit 1
          fi

  check-no-features:
    needs: [push-manifest]
    name: Check each crate with no features (${{ matrix.partition }})
    runs-on: self-hosted
    strategy:
      matrix:
        partition: [1, 2, 3, 4]  # Adjust based on number of crates
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - name: Check without features
        run: |
          set -euo pipefail
          crates=($(cargo metadata --format-version=1 --no-deps | jq -r '.packages[].name' | sort))
          total_crates=${#crates[@]}
          partition_size=$(( (total_crates + 3) / 4 ))  # Ceiling division for 4 partitions
          start_idx=$(( (partition_size * (${{ matrix.partition }} - 1)) ))
          end_idx=$(( partition_size * ${{ matrix.partition }} ))

          for ((i=start_idx; i<end_idx && i<total_crates; i++)); do
            crate="${crates[$i]}"
            echo "Checking $crate..."
            cargo clippy -p "$crate" --bins --tests --benches --examples --no-default-features --all-targets -- -D warnings
          done

  run-tests-partitioned:
    name: Test (${{ matrix.partition }})
    needs: [format]
    runs-on: self-hosted
    timeout-minutes: 20
    strategy:
      matrix:
        partition: [1, 2]
    env:
      PGDATABASE: grug_test
      DB_HOST: postgres
      CLICKHOUSE_HOST: localhost
      CLICKHOUSE_DATABASE: grug_test
      CLICKHOUSE_USER: default
    steps:
      - name: Detect runner and set ports
        run: |
          # Extract runner number from hostname
          RUNNER_NUM=$(hostname | grep -o '[0-9]*$' || echo "1")

          # Base ports: 20001, 20002, 20003, 20004 per runner
          PG_PORT=$((20000 + RUNNER_NUM))
          CH_PORT=$((30000 + RUNNER_NUM))

          echo "POSTGRES_PORT=$PG_PORT" >> $GITHUB_ENV
          echo "CLICKHOUSE_PORT=$CH_PORT" >> $GITHUB_ENV
          echo "Using runner $RUNNER_NUM with ports PG:$PG_PORT CH:$CH_PORT"
      # NOTE: I can't use the services option because I need dynamic ports as
      # env variable to avoid port conflicts since we run multiple runners
      # per host.
      - name: Start services
        run: |
          docker run -d --name pg-${{ github.run_id }}-${{ matrix.partition }} \
            -e POSTGRES_PASSWORD=postgres \
            -p 127.0.0.1:$POSTGRES_PORT:5432 \
            --health-cmd="pg_isready" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=5 \
          postgres:17

          docker run -d --name ch-${{ github.run_id }}-${{ matrix.partition }} \
            -e CLICKHOUSE_DB=grug_test -e CLICKHOUSE_USER=default \
            -e CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1 \
            -p 127.0.0.1:$CLICKHOUSE_PORT:8123\
            --health-cmd="clickhouse-client --query 'SELECT 1'" \
            --health-interval=5s \
            --health-timeout=5s \
            --health-retries=10 \
            --ulimit nofile=262144:262144 \
          clickhouse/clickhouse-server:latest
      - name: Wait for services
        run: |
          timeout 120 bash -c 'until [ "$(docker inspect --format="{{.State.Health.Status}}" pg-${{ github.run_id }}-${{ matrix.partition }})" == "healthy" ]; do sleep 2; done'
          timeout 120 bash -c 'until [ "$(docker inspect --format="{{.State.Health.Status}}" ch-${{ github.run_id }}-${{ matrix.partition }})" == "healthy" ]; do sleep 2; done'
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install nextest
        uses: taiki-e/install-action@nextest
      - name: Run tests
        run: |
          ~/.cargo/bin/cargo-nextest nextest run --all-features --partition count:${{ matrix.partition }}/2
      - name: Cleanup
        if: always()
        run: |
          docker stop pg-${{ github.run_id }}-${{ matrix.partition }} ch-${{ github.run_id }}-${{ matrix.partition }} || true
          docker rm pg-${{ github.run_id }}-${{ matrix.partition }} ch-${{ github.run_id }}-${{ matrix.partition }} || true

  build:
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
        runner:
          [self-hosted]
          # when needing to try on all runner types
          # - [self-hosted, Linux]
          # - [self-hosted, macOS]
    name: Build ${{ matrix.arch }} on ${{ join(matrix.runner, ', ') }}
    runs-on: ${{ matrix.runner }}
    needs: [run-tests-partitioned]
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: Set build config
        id: config
        run: |
          set -euo pipefail
          if [[ "${{ matrix.arch }}" == "amd64" ]]; then
            if [[ "${{ runner.arch }}" == "X64" ]]; then
              echo "image=ghcr.io/left-curve/left-curve/native-builder:amd64" >> $GITHUB_OUTPUT
              echo "arch=x86_64" >> $GITHUB_OUTPUT
            elif [[ "${{ runner.arch }}" == "ARM64" ]]; then
              # if [[ "${{ runner.os }}" == "macOS" ]]; then
              #   echo "Unsupported runner: OS=${{ runner.os }}, Arch=${{ runner.arch }}, cross doesn't work with this config (sadly). We should fix this."
              #   exit 1
              # fi

              echo "image=ghcr.io/left-curve/left-curve/cross-builder-amd64" >> $GITHUB_OUTPUT
              echo "arch=arm64" >> $GITHUB_OUTPUT
            else
              echo "Unsupported runner: OS=${{ runner.os }}, Arch=${{ runner.arch }}"
              exit 1
            fi
            echo "target=x86_64-unknown-linux-gnu" >> $GITHUB_OUTPUT
            echo "platform=linux/amd64" >> $GITHUB_OUTPUT
            echo "suffix=amd64" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.arch }}" == "arm64" ]]; then
            if [[ "${{ runner.arch }}" == "X64" ]]; then
              echo "image=ghcr.io/left-curve/left-curve/cross-builder-arm64" >> $GITHUB_OUTPUT
            elif [[ "${{ runner.arch }}" == "ARM64" ]]; then
              if [[ "${{ runner.os }}" == "macOS" ]]; then
                echo "image=ghcr.io/left-curve/left-curve/cross-builder-arm64" >> $GITHUB_OUTPUT
              elif [[ "${{ runner.os }}" == "Linux" ]]; then
                # NOTE: I could use a native-builder in such case, but using cross to keep consistency
                echo "image=ghcr.io/left-curve/left-curve/cross-builder-arm64" >> $GITHUB_OUTPUT
              else
                echo "Unsupported runner OS for ARM64: OS=${{ runner.os }}, Arch=${{ runner.arch }}"
                exit 1
              fi
            else
              echo "Unsupported runner: OS=${{ runner.os }}, Arch=${{ runner.arch }}"
              exit 1
            fi
            echo "target=aarch64-unknown-linux-gnu" >> $GITHUB_OUTPUT
            echo "platform=linux/arm64" >> $GITHUB_OUTPUT
            echo "suffix=arm64" >> $GITHUB_OUTPUT
          else
              echo "Unsupported matrix ${{ matrix.arch }}"
              exit 1
          fi

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Write Cross.toml
        run: |
          echo "[target.${{ steps.config.outputs.target }}]" > Cross.toml
          echo "image = \"${{ steps.config.outputs.image }}\"" >> Cross.toml

      - name: Set GIT_COMMIT
        run: |
          cp grug/types/src/git_info.rs grug/types/src/git_info.rs.in
          sed "s/{{GIT_COMMIT}}/${{ env.GIT_COMMIT }}/" grug/types/src/git_info.rs.in > grug/types/src/git_info.rs
          rm grug/types/src/git_info.rs.in

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v4
        with:
          path: .cross-cache
          key: cross-cache-${{ runner.os }}-${{ steps.config.outputs.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: pull cross docker builder image
        run: |
          docker pull ${{ steps.config.outputs.image }}

      - name: build binary with cross
        run: |
          set -euo pipefail
          mkdir -p .cross-cache/${{ steps.config.outputs.target }}
          CROSS_TARGET_CACHE=$(pwd)/.cross-cache/${{ steps.config.outputs.target }} \
          cross build --target ${{ steps.config.outputs.target }} --release --verbose

      - name: build docker image
        run: |
          set -euo pipefail
          docker buildx build \
            --push \
            --platform ${{ steps.config.outputs.platform }} \
            --build-arg TARGET_ARCH=${{ steps.config.outputs.target }} \
            --build-arg GIT_COMMIT=${{ env.GIT_COMMIT }} \
            --provenance=false \
            -t ghcr.io/left-curve/left-curve/dango:${{ env.GIT_COMMIT }}-${{ steps.config.outputs.suffix }} \
            -f docker/dango/Dockerfile .

      - name: Ensure Dango works
        run: |
          docker run --rm ghcr.io/left-curve/left-curve/dango:${{ env.GIT_COMMIT }}-${{ steps.config.outputs.suffix }} dango || true

  push-manifest:
    name: Push a multi-arch docker image
    permissions:
      packages: write
    needs: [build]
    runs-on: [self-hosted]
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-arch Docker manifest
        run: |
          docker manifest create ghcr.io/left-curve/left-curve/dango:${{ env.GIT_COMMIT }} \
            --amend ghcr.io/left-curve/left-curve/dango:${{ env.GIT_COMMIT }}-amd64 \
            --amend ghcr.io/left-curve/left-curve/dango:${{ env.GIT_COMMIT }}-arm64

          docker manifest push --purge ghcr.io/left-curve/left-curve/dango:${{ env.GIT_COMMIT }}

          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            docker manifest create ghcr.io/left-curve/left-curve/dango:latest \
              --amend ghcr.io/left-curve/left-curve/dango:${{ env.GIT_COMMIT }}-amd64 \
              --amend ghcr.io/left-curve/left-curve/dango:${{ env.GIT_COMMIT }}-arm64

            docker manifest push --purge ghcr.io/left-curve/left-curve/dango:latest
          fi

  localdango:
    timeout-minutes: 5
    name: Testing localdango
    runs-on: [self-hosted]
    needs: [push-manifest]
    permissions:
      packages: read
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure localdango works
        env:
          DANGO_TAG: ${{ env.GIT_COMMIT }}
          POSTGRES_PORT: 0
          CLICKHOUSE_PORT: 0
          DANGO_PORT: 0
          COMETBFT_PORT: 0
          COMETBFT_TAG: v0.38.17
        run: |
          cd networks/localdango

          docker compose down -v

          docker compose up -d --wait || {
            echo "Services failed to become healthy"
            docker compose ps
            docker compose logs
            exit 1
          }
      - name: Cleanup
        if: always()
        run: |
          cd networks/localdango
          docker compose down -v || true

  deploy-dango:
    if: github.ref == 'refs/heads/main'
    permissions:
      packages: read
    needs: [push-manifest]
    runs-on: [self-hosted]
    env:
      DANGO_DB_PASSWORD: ${{ secrets.DANGO_DB_PASSWORD }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DANGO_CLICKHOUSE_PASSWORD: ${{ secrets.DANGO_CLICKHOUSE_PASSWORD }}
      CLICKHOUSE_PASSWORD: ${{ secrets.CLICKHOUSE_PASSWORD }}
      DEVNET_COMETBFT_NODE_KEY: ${{ secrets.DEVNET_COMETBFT_NODE_KEY }}
      DEVNET_COMETBFT_VALIDATOR_ADDRESS: ${{ secrets.DEVNET_COMETBFT_VALIDATOR_ADDRESS }}
      DEVNET_COMETBFT_VALIDATOR_PUB_KEY: ${{ secrets.DEVNET_COMETBFT_VALIDATOR_PUB_KEY }}
      DEVNET_COMETBFT_VALIDATOR_PRIVATE_KEY: ${{ secrets.DEVNET_COMETBFT_VALIDATOR_PRIVATE_KEY }}
      SENTRY__DSN: ${{ secrets.SENTRY__DSN }}
      # Still using this as ENV for the bots ansible playbook to login properly
      GITHUB_USER: ${{ github.actor }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - name: Check DEPLOY_KEY is set
        run: |
          if [ -z "${{ secrets.DEPLOY_KEY }}" ]; then
            echo "Missing DEPLOY_KEY secret"
            exit 1
          fi
      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}
      - name: Ensure ~/.local/bin is in PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install Ansible & Docker SDK
        run: |
          pipx install ansible
          pipx ensurepath
          ln -f -s ~/.local/pipx/venvs/ansible/bin/ansible-galaxy ~/.local/bin/ansible-galaxy
          ln -sf ~/.local/pipx/venvs/ansible/bin/ansible-playbook ~/.local/bin/ansible-playbook
          cd deploy
          ansible-galaxy collection install -r requirements.yml
      - name: Run Ansible playbook
        run: |
          cd deploy
          pipx ensurepath
          ansible-playbook reset-cometbft.yml --limit 100.96.253.40 -e '{"dango_networks":["devnet"]}'
          ansible-playbook reset-dango.yml --limit 100.96.253.40 -e '{"dango_networks":["devnet"]}'
          ansible-playbook cometbft.yml --limit 100.96.253.40 -e '{"dango_networks":["devnet"]}'
          ansible-playbook dango.yml --tags setup --limit 100.96.253.40 -e '{"dango_networks":["devnet"]}'
          ansible-playbook dango.yml --limit 100.96.253.40 \
            --skip-tags setup \
            -e dango_image_tag=${{ env.GIT_COMMIT }} \
            -e "dango_db_password=$DANGO_DB_PASSWORD" \
            -e '{"dango_networks":["devnet"]}'
          ansible-playbook bots.yml --limit 100.96.253.40 -e '{"dango_networks":["devnet"]}' -e faucet_version=latest
