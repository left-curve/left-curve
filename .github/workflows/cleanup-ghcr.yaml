name: Cleanup Old GHCR Images
on:
  schedule:
    # every day at 3am UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  cleanup:
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup old container images
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          DAYS: 5
        run: |
          set -e

          echo "Starting cleanup for repository: $REPO"
          echo "Deleting images older than $DAYS days"
          echo "Current date: $(date)"
          echo "Cutoff date: $(date -d "-${DAYS} days")"
          echo "====================================="

          IMAGES=("left-curve%2Fdango" "left-curve%2Fdango-frontend")
          TOTAL_PROCESSED=0
          TOTAL_DELETED=0
          TOTAL_SKIPPED=0
          TOTAL_ERRORS=0

          for IMAGE in "${IMAGES[@]}"; do
            echo "üßπ Processing image: $IMAGE"

            # Get all versions with proper pagination
            echo "  Fetching all versions..."
            page=1
            all_versions=""

            while true; do
              echo "    Fetching page $page..."

              page_response=$(gh api -H "Accept: application/vnd.github+json" \
                "/orgs/left-curve/packages/container/${IMAGE}/versions?page=${page}&per_page=100" 2>&1) || {
                echo "  ERROR: Failed to fetch page $page for $IMAGE"
                echo "  Response: $page_response"
                TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
                break
              }

              # Check if page is empty
              page_count=$(echo "$page_response" | jq '. | length')
              if [ "$page_count" -eq 0 ]; then
                echo "    No more versions found"
                break
              fi

              echo "    Found $page_count version(s) on page $page"

              # Append to all_versions
              if [ -z "$all_versions" ]; then
                all_versions="$page_response"
              else
                all_versions=$(echo "$all_versions" "$page_response" | jq -s 'add')
              fi

              ((page++))

              # Safety break to avoid infinite loops
              if [ $page -gt 100 ]; then
                echo "    WARNING: Reached page limit (100), stopping"
                break
              fi
            done

            if [ -z "$all_versions" ]; then
              echo "  No versions found, skipping"
              continue
            fi

            # Count total versions
            total_count=$(echo "$all_versions" | jq '. | length')
            echo "  Total versions found: $total_count"

            # Process each version
            while IFS= read -r version; do
              TOTAL_PROCESSED=$((TOTAL_PROCESSED + 1))

              CREATED=$(echo "$version" | jq -r '.created_at')
              ID=$(echo "$version" | jq -r '.id')
              NAME=$(echo "$version" | jq -r '.name // "unnamed"')

              # Get tags safely
              TAGS=$(echo "$version" | jq -r '.metadata.container.tags[]? // empty' 2>/dev/null | tr '\n' ',' | sed 's/,$//')

              echo "    Processing version: $ID (name: $NAME, tags: ${TAGS:-none}, created: $CREATED)"

              # Skip if has latest tag
              if echo "$version" | jq -r '.metadata.container.tags[]?' 2>/dev/null | grep -q "^latest$"; then
                echo "      ‚úÖ SKIP: Has 'latest' tag"
                TOTAL_SKIPPED=$((TOTAL_SKIPPED + 1))
                continue
              fi

              # Skip if has pr-X-latest pattern
              if echo "$version" | jq -r '.metadata.container.tags[]?' 2>/dev/null | grep -q "^pr-.*-latest$"; then
                echo "      ‚úÖ SKIP: Has PR preview tag"
                TOTAL_SKIPPED=$((TOTAL_SKIPPED + 1))
                continue
              fi

              # Check age
              CREATED_TIMESTAMP=$(date -d "$CREATED" +%s 2>/dev/null) || {
                echo "      ‚ö†Ô∏è  SKIP: Invalid date format: $CREATED"
                TOTAL_SKIPPED=$((TOTAL_SKIPPED + 1))
                continue
              }

              CUTOFF_TIMESTAMP=$(date -d "-${DAYS} days" +%s)

              if [ "$CREATED_TIMESTAMP" -lt "$CUTOFF_TIMESTAMP" ]; then
                echo "      üóëÔ∏è  DELETE: Image is older than $DAYS days"

                delete_response=$(gh api --method DELETE \
                  "/orgs/left-curve/packages/container/${IMAGE}/versions/$ID" 2>&1) || {
                  echo "      ‚ùå ERROR: Failed to delete version $ID"
                  echo "      Response: $delete_response"
                  TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
                  continue
                }

                echo "      ‚úÖ SUCCESS: Deleted version $ID"
                TOTAL_DELETED=$((TOTAL_DELETED + 1))
              else
                echo "      ‚úÖ SKIP: Image is newer than $DAYS days"
                TOTAL_SKIPPED=$((TOTAL_SKIPPED + 1))
              fi
            done < <(echo "$all_versions" | jq -c '.[]')

            echo "  Completed processing $IMAGE"
            echo
          done

          echo "====================================="
          echo "CLEANUP SUMMARY"
          echo "====================================="
          echo "Images processed: ${#IMAGES[@]}"
          echo "Versions processed: $TOTAL_PROCESSED"
          echo "Versions deleted: $TOTAL_DELETED"
          echo "Versions skipped: $TOTAL_SKIPPED"
          echo "Errors encountered: $TOTAL_ERRORS"

          if [ $TOTAL_ERRORS -gt 0 ]; then
            echo "‚ö†Ô∏è  WARNING: Some operations failed. Check logs above."
            exit 1
          else
            echo "‚úÖ SUCCESS: Cleanup completed successfully"
          fi

