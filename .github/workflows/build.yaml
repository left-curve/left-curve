name: Cross Build Dango

env:
  COMETBFT_GIT_TAG: v0.38.17
  GIT_COMMIT: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  manifest:
    needs: [build-arm64, build-amd64]
    runs-on: ubuntu-latest
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-arch Docker manifest
        run: |
          docker manifest create ghcr.io/left-curve/left-curve/dango:${{ env.GIT_COMMIT }} \
            --amend ghcr.io/left-curve/left-curve/dango:${{ env.GIT_COMMIT }}-amd64 \
            --amend ghcr.io/left-curve/left-curve/dango:${{ env.GIT_COMMIT }}-arm64

          docker manifest push ghcr.io/left-curve/left-curve/dango:${{ env.GIT_COMMIT }}

          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            docker manifest create ghcr.io/left-curve/left-curve/dango:latest \
              --amend ghcr.io/left-curve/left-curve/dango:${{ env.GIT_COMMIT }}-amd64 \
              --amend ghcr.io/left-curve/left-curve/dango:${{ env.GIT_COMMIT }}-arm64

            docker manifest push ghcr.io/left-curve/left-curve/dango:latest
          fi

  build-arm64:
    runs-on: [self-hosted]
    steps:
      - uses: actions/checkout@v4

      - name: Determine build configuration
        id: config
        run: |
          if [[ "${{ runner.arch }}" == "X64" ]]; then
            echo "image=ghcr.io/left-curve/left-curve/cross-builder:amd64" >> $GITHUB_OUTPUT
            echo "arch=x86_64" >> $GITHUB_OUTPUT
          elif [[ "${{ runner.arch }}" == "ARM64" ]]; then
            echo "image=ghcr.io/left-curve/left-curve/native-builder:arm64" >> $GITHUB_OUTPUT
            echo "arch=arm64" >> $GITHUB_OUTPUT
          else
            echo "Unsupported runner: OS=${{ runner.os }}, Arch=${{ runner.arch }}"
            exit 1
          fi
          echo "target=aarch64-unknown-linux-gnu" >> $GITHUB_OUTPUT
          echo "platform=linux/arm64" >> $GITHUB_OUTPUT
          echo "suffix=arm64" >> $GITHUB_OUTPUT

      - name: Install cross
        run: cargo install cross

      - name: Write dynamic Cross.toml
        run: |
          echo "[target.${{ steps.config.outputs.target }}]" > Cross.toml
          echo "image = \"${{ steps.config.outputs.image }}\"" >> Cross.toml

      - name: Prepare git_info.rs
        run: |
          cp dango/cli/src/git_info.rs dango/cli/src/git_info.rs.in
          sed "s/{{GIT_COMMIT}}/${{ env.GIT_COMMIT }}/" dango/cli/src/git_info.rs.in > dango/cli/src/git_info.rs
          rm dango/cli/src/git_info.rs.in

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v4
        with:
          path: |
            .cross-cache
          key: cross-cache-${{ runner.os }}-${{ steps.config.outputs.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Dango with cross and local cache
        run: |
          mkdir -p .cross-cache/${{ steps.config.outputs.target }}
          CROSS_TARGET_CACHE=$(pwd)/.cross-cache/${{ steps.config.outputs.target }} \
          cross build --target ${{ steps.config.outputs.target }} --release

      - name: Build Dango docker image
        run: |
          docker buildx build \
            --platform ${{ steps.config.outputs.platform }} \
            --build-arg TARGET_ARCH=${{ steps.config.outputs.target }} \
            --build-arg GIT_COMMIT=${{ env.GIT_COMMIT }} \
            --push \
            --provenance=false \
            -t ghcr.io/left-curve/left-curve/dango:${{ env.GIT_COMMIT }}-${{ steps.config.outputs.suffix }} \
            -f docker/dango/Dockerfile .

  build-amd64:
    runs-on: [self-hosted]
    steps:
      - uses: actions/checkout@v4

      - name: Determine build configuration
        id: config
        run: |
          if [[ "${{ runner.arch }}" == "X64" ]]; then
            echo "image=ghcr.io/left-curve/left-curve/native-builder:amd64" >> $GITHUB_OUTPUT
            echo "arch=x86_64" >> $GITHUB_OUTPUT
          elif [[ "${{ runner.arch }}" == "ARM64" ]]; then
            echo "image=ghcr.io/left-curve/left-curve/cross-builder:arm64" >> $GITHUB_OUTPUT
            echo "arch=arm64" >> $GITHUB_OUTPUT
          else
            echo "Unsupported runner: OS=${{ runner.os }}, Arch=${{ runner.arch }}"
            exit 1
          fi
          echo "target=x86_64-unknown-linux-gnu" >> $GITHUB_OUTPUT
          echo "platform=linux/amd64" >> $GITHUB_OUTPUT
          echo "suffix=amd64" >> $GITHUB_OUTPUT

      - name: Install cross
        run: cargo install cross

      - name: Write dynamic Cross.toml
        run: |
          echo "[target.${{ steps.config.outputs.target }}]" > Cross.toml
          echo "image = \"${{ steps.config.outputs.image }}\"" >> Cross.toml

      - name: Prepare git_info.rs
        run: |
          cp dango/cli/src/git_info.rs dango/cli/src/git_info.rs.in
          sed "s/{{GIT_COMMIT}}/${{ env.GIT_COMMIT }}/" dango/cli/src/git_info.rs.in > dango/cli/src/git_info.rs
          rm dango/cli/src/git_info.rs.in

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v4
        with:
          path: |
            .cross-cache
          key: cross-cache-${{ runner.os }}-${{ steps.config.outputs.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Dango with cross and local cache
        run: |
          mkdir -p .cross-cache/${{ steps.config.outputs.target }}
          CROSS_TARGET_CACHE=$(pwd)/.cross-cache/${{ steps.config.outputs.target }} \
          cross build --target ${{ steps.config.outputs.target }} --release

      - name: Build Dango docker image
        run: |
          docker buildx build \
            --platform ${{ steps.config.outputs.platform }} \
            --build-arg TARGET_ARCH=${{ steps.config.outputs.target }} \
            --build-arg GIT_COMMIT=${{ env.GIT_COMMIT }} \
            --push \
            --provenance=false \
            -t ghcr.io/left-curve/left-curve/dango:${{ env.GIT_COMMIT }}-${{ steps.config.outputs.suffix }} \
            -f docker/dango/Dockerfile .
