type Block {
	blockHeight: Int!
	hash: String!
	appHash: String!
	"""
	Returns the block timestamp in ISO 8601 format with time zone.
	"""
	createdAt: String!
	"""
	Transactions order isn't guaranteed, check `transactionIdx`
	"""
	transactions: [Transaction!]!
	flattenEvents: [Event!]!
}

type BlockConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [BlockEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Block!]!
}

"""
An edge in a connection.
"""
type BlockEdge {
	"""
	The item at the end of the edge
	"""
	node: Block!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type BlockInfo {
	blockHeight: Int!
	timestamp: NaiveDateTime!
	hash: String!
}

enum BlockSortBy {
	BLOCK_HEIGHT_ASC
	BLOCK_HEIGHT_DESC
}

enum CheckValue {
	EQUAL
	CONTAINS
}

type Event {
	type: String!
	method: String
	eventStatus: EventStatus!
	commitmentStatus: FlatCommitmentStatus!
	transactionType: Int!
	transactionIdx: Int!
	messageIdx: Int
	eventIdx: Int!
	data: JSON!
	blockHeight: Int!
	"""
	Returns the event timestamp in ISO 8601 format with time zone.
	"""
	createdAt: String!
	transaction: Transaction
}

type EventConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [EventEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Event!]!
}

"""
An edge in a connection.
"""
type EventEdge {
	"""
	The item at the end of the edge
	"""
	node: Event!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

enum EventSortBy {
	BLOCK_HEIGHT_ASC
	BLOCK_HEIGHT_DESC
}

enum EventStatus {
	ok
	failed
	nested_failed
	handled
}

input Filter {
	type: String
	data: [FilterData!]
}

input FilterData {
	path: [String!]!
	checkMode: CheckValue!
	value: [JSON!]!
}

enum FlatCategory {
	cron
	tx
}

enum FlatCommitmentStatus {
	committed
	failed
	reverted
}

scalar GrugQueryInput

"""
A scalar that can represent any JSON value.
"""
scalar JSON

type Message {
	orderIdx: Int!
	data: JSON!
	methodName: String!
	blockHeight: Int!
	contractAddr: String
	senderAddr: String!
	"""
	Returns the message timestamp in ISO 8601 format with time zone.
	"""
	createdAt: String!
}

type MessageConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [MessageEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Message!]!
}

"""
An edge in a connection.
"""
type MessageEdge {
	"""
	The item at the end of the edge
	"""
	node: Message!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

enum MessageSortBy {
	BLOCK_HEIGHT_ASC
	BLOCK_HEIGHT_DESC
}

type Mutation {
	broadcastTxSync(
		"""
		Transaction as JSON
		"""
		tx: Tx!
	): JSON!
}

"""
ISO 8601 combined date and time without timezone.

# Examples

* `2015-07-01T08:59:60.123`,
"""
scalar NaiveDateTime

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type Query {
	"""
	Get a block.
	"""
	block(height: Int): Block
	"""
	Get paginated blocks.
	"""
	blocks(
		"""
		Cursor based pagination
		"""
		after: String,
		"""
		Cursor based pagination
		"""
		before: String,
		"""
		Cursor based pagination
		"""
		first: Int,
		"""
		Cursor based pagination
		"""
		last: Int,		sortBy: BlockSortBy
	): BlockConnection!
	"""
	Get paginated transactions.
	"""
	transactions(
		"""
		Cursor based pagination
		"""
		after: String,
		"""
		Cursor based pagination
		"""
		before: String,
		"""
		Cursor based pagination
		"""
		first: Int,
		"""
		Cursor based pagination
		"""
		last: Int,		sortBy: TransactionSortBy,		hash: String,		blockHeight: Int,		senderAddress: String
	): TransactionConnection!
	"""
	Get paginated messages.
	"""
	messages(
		"""
		Cursor based pagination
		"""
		after: String,
		"""
		Cursor based pagination
		"""
		before: String,
		"""
		Cursor based pagination
		"""
		first: Int,
		"""
		Cursor based pagination
		"""
		last: Int,		sortBy: MessageSortBy,		blockHeight: Int,		methodName: String,		contractAddr: String,		senderAddr: String
	): MessageConnection!
	"""
	Get paginated events.
	"""
	events(
		"""
		Cursor based pagination
		"""
		after: String,
		"""
		Cursor based pagination
		"""
		before: String,
		"""
		Cursor based pagination
		"""
		first: Int,
		"""
		Cursor based pagination
		"""
		last: Int,		sortBy: EventSortBy
	): EventConnection!
	queryApp(
		"""
		Request as JSON
		"""
		request: GrugQueryInput!,		height: Int
	): JSON!
	queryStore(
		"""
		Key as B64 string
		"""
		key: String!,		height: Int,		prove: Boolean! = false
	): Store!
	queryStatus: Status!
	simulate(
		"""
		Transaction as Json
		"""
		tx: UnsignedTx!
	): JSON!
}

type Status {
	block: BlockInfo!
	chainId: String!
}

type Store {
	"""
	The base64 encoded value
	"""
	value: String!
	"""
	The base64 encoded proof
	"""
	proof: String
}

type Subscription {
	block: Block!
	transactions(sinceBlockHeight: Int): [Transaction!]!
	messages(sinceBlockHeight: Int): [Message!]!
	events(sinceBlockHeight: Int, filter: [Filter!]): [Event!]!
}

type Transaction {
	blockHeight: Int!
	transactionType: FlatCategory!
	transactionIdx: Int!
	sender: String!
	data: JSON!
	credential: JSON!
	hash: String!
	hasSucceeded: Boolean!
	errorMessage: String
	gasWanted: Int!
	gasUsed: Int!
	"""
	Returns the transaction timestamp in ISO 8601 format with time zone.
	"""
	createdAt: String!
	"""
	Nested Events from this transaction, from block on-disk caching
	"""
	nestedEvents: String
	"""
	Flatten events from the indexer
	"""
	flattenEvents: [Event!]!
	messages: [Message!]!
}

type TransactionConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [TransactionEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Transaction!]!
}

"""
An edge in a connection.
"""
type TransactionEdge {
	"""
	The item at the end of the edge
	"""
	node: Transaction!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

enum TransactionSortBy {
	BLOCK_HEIGHT_ASC
	BLOCK_HEIGHT_DESC
}

"""
A transaction that can be sent to the chain.

Contains:
- Sender address
- List of messages to execute
- Gas limit
- Cryptographic signature

See [Tx](https://github.com/left-curve/left-curve/blob/main/grug/types/src/tx.rs).
"""
scalar Tx

"""
A transaction to simulate.

Contains:
- Sender address
- List of messages to execute

See [UnsignedTx](https://github.com/left-curve/left-curve/blob/main/grug/types/src/tx.rs).
"""
scalar UnsignedTx

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}
